import os
import time
import sqlite3 
import random
import requests
import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters,
)

# --------------------------------- ุฅุนุฏุงุฏุงุช ุงูุชุณุฌูู (Logging) ---------------------------------
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --------------------------------- ุชุนุฑูู ุงูุญุงูุงุช ูุงูุซูุงุจุช ---------------------------------

# ุงูุญุงูุงุช (States) ุงููุณุชุฎุฏูุฉ ูู ConversationHandler
(MAIN_MENU, FIRST_NAME, LAST_NAME, TEAM_NAME, 
 APOLOGY_TYPE, INITIATIVE_NAME, APOLOGY_REASON, APOLOGY_NOTES,
 LEAVE_START_DATE, LEAVE_END_DATE, LEAVE_REASON, LEAVE_NOTES,
 FEEDBACK_MESSAGE, PROBLEM_DESCRIPTION, PROBLEM_NOTES,
 ADMIN_MENU, ADD_VOLUNTEER_FULL_NAME, ADD_VOLUNTEER_SELECT_TEAM, ADD_VOLUNTEER_FINALIZE,
 REFERENCES_MENU) = range(20) 

# ูุชุบูุฑุงุช ุงูุจูุฆุฉ (Environment Variables)
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID') # ููุณุชุฎุฏู ูุฅุฑุณุงู ุงูุทูุจุงุช ุฅููู
HR_CONTACT_INFO = os.getenv('HR_CONTACT_INFO', 'ูุณุคูู ุงูููุงุฑุฏ ุงูุจุดุฑูุฉ') # ุฑูู ุฃู ูุนุฑู HR

# ูุชุบูุฑุงุช ุฎุงุตุฉ ุจู Webhook Render
WEBHOOK_URL = os.getenv('WEBHOOK_URL') 
PORT = int(os.environ.get('PORT', '5000')) 

# --------------------------------- ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช ---------------------------------

DB_NAME = 'volunteers_system.db'

def get_db_connection():
    """ุฅูุดุงุก ุงุชุตุงู ุจูุงุนุฏุฉ ุจูุงูุงุช SQLite"""
    conn = sqlite3.connect(DB_NAME)
    conn.row_factory = sqlite3.Row
    return conn

def setup_database():
    """ุฅูุดุงุก ุงูุฌุฏุงูู ุงููุงุฒูุฉ ูุชุนุจุฆุฉ ุงูุจูุงูุงุช ุงูุฃูููุฉ"""
    conn = get_db_connection()
    cursor = conn.cursor()

    # 1. Teams Table (ุงููุฑู)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Teams (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL UNIQUE
        )
    ''')
    
    # 2. Volunteers Table (ุงููุชุทูุนูู)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Volunteers (
            id INTEGER PRIMARY KEY,
            telegram_id INTEGER UNIQUE,
            full_name TEXT NOT NULL,
            team_id INTEGER,
            registration_date TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (team_id) REFERENCES Teams(id)
        )
    ''')
    
    # 3. Request Counter Table (ููุชุงุจุนุฉ ุงูุชุฑููู ุงููุชุณูุณู)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS RequestCounter (
            id INTEGER PRIMARY KEY,
            count INTEGER NOT NULL
        )
    ''')
    # ุชููุฆุฉ ุงูุนุฏุงุฏ ุฅุฐุง ูุงู ุงูุฌุฏูู ูุงุฑุบูุง
    if cursor.execute("SELECT COUNT(*) FROM RequestCounter").fetchone()[0] == 0:
        cursor.execute("INSERT INTO RequestCounter (id, count) VALUES (1, 0)")


    # ุฅุถุงูุฉ ูุฑู ูุจุฏุฆูุฉ ุฅุฐุง ูู ุชูู ููุฌูุฏุฉ
    initial_teams = [('ูุฑูู ุงูุฏุนู ุงูุฃูู',), ('ูุฑูู ุงูุฏุนู ุงูุซุงูู',), ('ูุฑูู ุงููุชุงุจุนุฉ',)]
    for team in initial_teams:
        try:
            cursor.execute("INSERT INTO Teams (name) VALUES (?)", team)
        except sqlite3.IntegrityError:
            pass 

    conn.commit()
    conn.close()

def get_all_teams():
    """ุฌูุจ ุฌููุน ุงููุฑู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช"""
    conn = get_db_connection()
    teams = conn.execute("SELECT id, name FROM Teams").fetchall()
    conn.close()
    return teams

def add_new_volunteer_to_db(telegram_id, full_name, team_id):
    """ุฅุฏุฑุงุฌ ูุชุทูุน ุฌุฏูุฏ ูู ุฌุฏูู ุงููุชุทูุนูู"""
    conn = get_db_connection()
    try:
        conn.execute(
            "INSERT INTO Volunteers (telegram_id, full_name, team_id) VALUES (?, ?, ?)",
            (telegram_id, full_name, team_id)
        )
        conn.commit()
        conn.close()
        return True
    except sqlite3.IntegrityError:
        conn.close()
        return False 

def is_admin(chat_id):
    """ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ูู ุงููุดุฑู"""
    if not ADMIN_CHAT_ID:
        return False
    return str(chat_id) == str(ADMIN_CHAT_ID)


def generate_request_id():
    """ุชูููุฏ ุฑูู ุทูุจ ูุชุณูุณู ูุจุฏุฃ ูู 0001"""
    conn = get_db_connection()
    try:
        # ุฒูุงุฏุฉ ุงูุนุฏุงุฏ ูุงูุญุตูู ุนูู ุงููููุฉ ุงูุฌุฏูุฏุฉ
        cursor = conn.cursor()
        cursor.execute("UPDATE RequestCounter SET count = count + 1 WHERE id = 1")
        conn.commit()
        
        new_count = conn.execute("SELECT count FROM RequestCounter WHERE id = 1").fetchone()[0]
        conn.close()
        # ุชูุณูู ุงูุฑูู ููููู ุฃุฑุจุนุฉ ุฎุงูุงุช (ูุซุงู: 0001, 0010)
        return f"REQ{new_count:04d}"
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุชูููุฏ ุฑูู ุงูุทูุจ: {e}")
        conn.close()
        return f"REQ{int(time.time())}" 

def get_request_title(request_type):
    """ุฌูุจ ุนููุงู ุงูุทูุจ ุจูุงุกู ุนูู ููุนู"""
    titles = {
        'apology': 'ุทูุจ ุงูุงุนุชุฐุงุฑ',
        'leave': 'ุทูุจ ุงูุฅุฌุงุฒุฉ',
        'problem': 'ุจูุงุบ ุงููุดููุฉ',
        'feedback': 'ุงูุงูุชุฑุงุญ/ุงูููุงุญุธุฉ'
    }
    return titles.get(request_type, 'ุทูุจ')

# --------------------------------- ุงูุนุจุงุฑุงุช ุงูุชุญููุฒูุฉ ---------------------------------

MOTIVATIONAL_QUOTES = [
    "โุงูุฎูุฑ ุงูุฐู ุชูุนูู ูุง ูุถูุน ุฃุจุฏูุงุ ุณุชุฌุฏู ูู ุตุญููุชู ุฃุซุฑุงู ุฌูููุงู ูุง ูููุญู. โจ",
    "ูู ูู ุนูู ุชุทูุนูุ ุฃูุช ูุง ุชูุฏู ุงููุณุงุนุฏุฉ ููุขุฎุฑูู ูุญุณุจุ ุจู ุชุฒุฑุน ุงูุฃูู ูู ููุจู ุฃูุถุงู. ๐",
    "ุชุฐูุฑ ุฏุงุฆูุงู ุฃู ุฃุตุบุฑ ุฌูุฏ ุชุจุฐูู ูู ูุณุงุนุฏุฉ ุงูุขุฎุฑููุ ูู ุฃุนุธู ุฃุซุฑ ูู ููุฒุงู ุงูุฃุฌุฑ. ๐",
    "ุงูุชูุงุคู ููุณ ูุฌุฑุฏ ูููุฉุ ุจู ูู ูุนู ุฅูุฌุงุจู ูุจุฏุฃ ููู. ุงุณุชูุฑ ูู ูุดุฑ ุงูุถูุก. ๐ก",
    "ุงูุนูู ุงูุฎูุฑู ูุง ูุชุทูุจ ูุงูุงู ุฏุงุฆูุงูุ ูููู ุฃู ุชูุฏู ุฌุฒุกุงู ูู ุฑูุญู ูููุชู. ุดูุฑุงู ูุฌูุฏู. ๐",
    "ูู ุฃูุช ุงูุชุบููุฑ ุงูุฐู ุชุชููู ุฃู ุชุฑุงู ูู ุงูุนุงูู. ูู ุฎุทูุฉ ุชุทูุนูุฉ ูู ุจุฏุงูุฉ. ๐",
    "ุงููุชุทูุนูู ูู ุงูููุจ ุงููุงุจุถ ูุฃู ูุฌุชูุนุ ุจุฌููุฏูู ุชุชุณุน ุฏุงุฆุฑุฉ ุงูุนุทุงุก. โค๏ธ",
    "ุงูุฃูู ุดุฌุฑุฉ ูุง ูุซูุฑ ุฅูุง ุจุงูุนูู. ุงุณุชูุฑ ูู ุงูุณูุงูุฉ! ๐ณ",
    "ุฃุซุฑู ุงูุฌููู ููุฑู ูู ุนููู ูู ุณุงุนุฏุชูู. ูุง ุชุณุชุฎู ุจุฃู ุนูู ููุช ุจู. ๐ท",
    "ุฅุฐุง ุฃุฑุฏุช ุฃู ุชููู ุณุนูุฏุงูุ ููู ุณุจุจุงู ูู ุณุนุงุฏุฉ ุบูุฑู. ูุฐุง ูู ุฌููุฑ ุงูุชุทูุน. ๐",
    "ุฑุญูุฉ ุงูุฃูู ููู ุชุจุฏุฃ ุจุฎุทูุฉุ ูุฃุซูู ุงูุฎุทูุงุช ูู ุชูู ุงูุชู ุชุฎุทููุง ูุฎุฏูุฉ ุงูุขุฎุฑูู. ๐ถ",
    "ุฃูุช ูุณุช ูุฌุฑุฏ ูุชุทูุนุ ุฃูุช ุตุงูุน ูุฑู ูู ุญูุงุฉ ุงููุซูุฑูู. ุฏูุช ูุจุฏุนุงู. ๐ฆธ",
    "ุงููุฃุณ ูุง ูููู ุจูู ุนุฑููุง ูุนูู ุงูุนุทุงุก ูุงูุฎูุฑ. ุงููุณุชูุจู ููุชุธุฑ ูู ูุฒุฑุน ููู ุงูุฃูู. ๐ฑ",
    "ุฌุจุฑ ุงูุฎูุงุทุฑ ูู ูู ูุง ูุชููู ุฅูุง ุงูุฃูููุงุกุ ุดูุฑุงู ูููุจู ุงูุทูุจ. ๐",
    "ุงุฌุนููุง ุฃุซุฑูู ูุงููุทุฑุ ูุณูู ุงูุฃุฑุถ ููุญูููุง ุฏูู ุถุฌูุฌ. ุงูุนูู ุงูุตุงูุช ุฃุจูุบ. ๐ง๏ธ",
    "ูุฏ ูุง ุชุฐูุฑ ูู ูุฑุฉ ุณูุทุชุ ูููู ุณุชุฐูุฑ ูู ูุฑุฉ ูุฏุช ูุฏู ูููุณุงุนุฏุฉ. ๐ช",
    "ุชุฐูุฑ: ูู ูุชุทูุน ูู ุจุทู ุญูููู ูู ุงูุญูุงุฉ ุงูููููุฉ. ุงุณุชูุฑ ูู ุฅููุงุฐ ุงูุนุงูู ุจุทุฑููุชู. ๐ก๏ธ",
    "ูุง ููุฌุฏ ุนูู ุตุบูุฑ ุนูุฏูุง ููุฏู ูู ููุจ ูุจูุฑ. ุนุทุงุคู ูุง ูููุฏุฑ ุจุซูู. ๐",
    "ุงูุชุทูุน ูู ุฃู ุชุชุฑู ููุงูุงู ุฃูุถู ููุง ูุฌุฏุชู ุนููู. ุดูุฑุงู ูุชุฑู ุจุตูุชู ุงูุฑุงุฆุนุฉ. โ๏ธ",
    "ุญุงูุธ ุนูู ุฅุดุฑุงูุชูุ ูุงูุนุงูู ุจุญุงุฌุฉ ุฅูู ูุชูุงุฆููู ูุซูู ููุถูุฆูุง ุฏุฑูุจูู. โ๏ธ",
    "ุฅู ุฃูุถู ุทุฑููุฉ ูุชุฌุฏ ููุณูุ ูู ุฃู ุชุถูุนูุง ูู ุฎุฏูุฉ ุงูุขุฎุฑูู. (ุบุงูุฏู) ๐๏ธ",
    "ูุง ุชุชููู ุนู ุงูุญููุ ูุงูุฃูู: ูุง ุชุชููู ุนู ุงูุนูู ูุชุญููู ูุฐู ุงูุฃุญูุงู ุฅูู ูุงูุน ููููุณ ููุฌููุน. ๐"
]

# --------------------------------- ุฏูุงู ุงููุณุงุนุฏุฉ ููุฑุณุงุฆู ---------------------------------

async def delete_previous_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    """ูุญุงูู ุญุฐู ุฑุณุงูุฉ ุงูุจูุช ุงูุฃุฎูุฑุฉ ุงููุฎุฒูุฉ ูู context.user_data."""
    message_id = context.user_data.pop('last_bot_message_id', None)
    if message_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        except Exception as e:
            logger.debug(f"ูุดู ูู ุญุฐู ุงูุฑุณุงูุฉ {message_id}: {e}")

async def send_and_track_message(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, reply_markup: InlineKeyboardMarkup = None, parse_mode: str = None):
    """ูุฑุณู ุฑุณุงูุฉ ุฌุฏูุฏุฉ ููุฎุฒู ุฑูููุง ูุชูุธูู ุงููุญุงุฏุซุฉ ูุงุญูุงู."""
    message = await update.effective_chat.send_message(
        text=text,
        reply_markup=reply_markup,
        parse_mode=parse_mode
    )
    context.user_data['last_bot_message_id'] = message.message_id
    return message


# --------------------------------- ุงูุฏูุงู ุงูุฃุณุงุณูุฉ ---------------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุงูุจุฏุงูุฉ - ุนุฑุถ ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ (ุชู ุงูุชุนุฏูู ูุชุญุฑูุฑ ุงูุฑุณุงูุฉ)"""
    query = update.callback_query
    
    if query:
        await query.answer()
        user = query.from_user
        message = query.message
        # ูุง ูุญุฐู ููุง ูุฃููุง ุณูููู ุจุชุญุฑูุฑ ุงูุฑุณุงูุฉ
    else:
        user = update.effective_user
        message = update.message
        # ูุญุงููุฉ ุญุฐู ุฑุณุงูุฉ ุงูุฃูุฑ /start ุฅุฐุง ูู ุชูู ุฃูู ุฑุณุงูุฉ
        if message.text and message.text.startswith('/start'):
             try:
                 await context.bot.delete_message(chat_id=message.chat_id, message_id=message.message_id)
             except Exception:
                 pass # ูุง ููู ุฅุฐุง ูุดู ุงูุญุฐู

    # ุชูุธูู ุจูุงูุงุช ุงููุณุชุฎุฏู ูุง ุนุฏุง ุจูุงูุงุช ุงููุดุฑู
    for key in list(context.user_data.keys()):
        if key not in ['admin_mode']:
            del context.user_data[key]

    keyboard = [
        [InlineKeyboardButton("๐ ุทูุจ ุงุนุชุฐุงุฑ", callback_data='apology'),
         InlineKeyboardButton("๐๏ธ ุทูุจ ุฅุฌุงุฒุฉ", callback_data='leave')],
        [InlineKeyboardButton("๐ง ูุณู ุงููุดุงูู", callback_data='problem'),
         InlineKeyboardButton("๐ก ุงูุชุฑุงุญุงุช ูููุงุญุธุงุช", callback_data='feedback')],
        [InlineKeyboardButton("๐ ูุฑุงุฌุน ุงููุฑูู", callback_data='references_menu'),
         InlineKeyboardButton("๐ ูุฏูุฉ ูุทููุฉ", callback_data='motivational_gift')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        f'ุฃููุงู {user.first_name}! ๐\n\n'
        'ุฃูุง ุจูุช ุทูุจุงุช ุงููุชุทูุนูู.\n'
        'ููู ูููููู ูุณุงุนุฏุชู ุงููููุ\n\n'
        'ูุฅูุบุงุก ุงูุทูุจ ูู ุฃู ููุชุ ุฃุฑุณู /cancel'
    )

    if query and query.message.text:
        try:
            message = await query.edit_message_text(text, reply_markup=reply_markup)
            context.user_data['last_bot_message_id'] = message.message_id
        except Exception:
             # ุฅุฐุง ูุดู ุงูุชุญุฑูุฑ (ูุซู ูุญุงููุฉ ุชุญุฑูุฑ ุฑุณุงูุฉ ูุฏููุฉ ุฌุฏุงู)ุ ูุฑุณู ุฑุณุงูุฉ ุฌุฏูุฏุฉ
             await context.bot.send_message(
                chat_id=message.chat_id, 
                text=text, 
                reply_markup=reply_markup,
                reply_to_message_id=None
            )
    else:
        message = await update.message.reply_text(text, reply_markup=reply_markup, reply_to_message_id=None)
        context.user_data['last_bot_message_id'] = message.message_id


    return MAIN_MENU

# --------------------------------- ุฏูุงู ุงูุฃุฒุฑุงุฑ ุงูุฌุฏูุฏุฉ ---------------------------------

async def references_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุนุฑุถ ูุงุฆูุฉ ุงููุฑุงุฌุน"""
    query = update.callback_query
    await query.answer()

    keyboard = [
        # **ุชุญุฏูุซ ูุฐู ุงูุฑูุงุจุท**
        [InlineKeyboardButton("๐ ูุฏููุฉ ุงูุณููู", url="YOUR_CODE_OF_CONDUCT_LINK_HERE")],
        [InlineKeyboardButton("๐ ุงููุฑุงุฑุงุช ุงูุฎุงุตุฉ ุจุงููุฑูู", url="YOUR_TEAM_DECISIONS_LINK_HERE")],
        [InlineKeyboardButton("โ๏ธ ุชุนูููุงุช ุงููุฑูุฒ", url="YOUR_CENTER_INSTRUCTIONS_LINK_HERE")],
        [InlineKeyboardButton("๐๏ธ ุฌูุณุงุช ุงููุฑูุฒ", url="YOUR_CENTER_SESSIONS_LINK_HERE")],
        [InlineKeyboardButton("๐ ุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "๐ **ูุฑุงุฌุน ุงููุฑูู**\n\n"
        "ููููู ุงููุตูู ุฅูู ุงููุณุชูุฏุงุช ูุงูุฑูุงุจุท ุงููุงูุฉ ุงูุฎุงุตุฉ ุจุงูุนูู ุงูุชุทูุนู ูุงููุฑูุฒ ูู ุงููุงุฆูุฉ ุฃุฏูุงู:"
    )

    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return REFERENCES_MENU 

async def send_motivational_gift(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุงุฎุชูุงุฑ ูุฅุฑุณุงู ุนุจุงุฑุฉ ุชุญููุฒูุฉ ุนุดูุงุฆูุฉ"""
    query = update.callback_query
    await query.answer()
    
    quote = random.choice(MOTIVATIONAL_QUOTES)
    
    gift_message = (
        "๐ **ูุฏูุฉ ูุทููุฉ ูู!** ๐\n"
        "โโโโโโโ\n"
        f"*{quote}*\n"
        "โโโโโโโ\n"
        "ุดูุฑุงู ูุฌููุฏู ูุนุทุงุฆู ุงููุชูุงุตู. ุฃูุช ุชุตูุน ูุฑูุงู ุญููููุงู! ๐"
    )

    await query.message.reply_text(
        gift_message, 
        parse_mode='Markdown'
    )
    
    # ุงูุนูุฏุฉ ุฅูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ (ุจุฏูู ุฅุฑุณุงู ุฑุณุงูุฉ ุชูุฑุงุฑ)
    return await start(update, context)

# --------------------------------- ุฏูุงู ุงูููุงุฆู ูุงููุณุงุฑุงุช ---------------------------------

async def main_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ูุนุงูุฌุฉ ุงุฎุชูุงุฑ ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ"""
    query = update.callback_query
    choice = query.data
    
    if choice == 'motivational_gift':
        return await send_motivational_gift(update, context)
    elif choice == 'references_menu':
        return await references_menu(update, context)
        
    await query.answer()

    # ุชูุธูู ุงูุจูุงูุงุช ูุจู ุจุฏุก ุทูุจ ุฌุฏูุฏ
    context.user_data.clear() 
    context.user_data['request_type'] = choice
    context.user_data['request_id'] = generate_request_id() # ุชูููุฏ ุฑูู ุงูุทูุจ ููุง

    keyboard = [[InlineKeyboardButton("๐ ุนูุฏุฉ", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if choice == 'feedback':
        message = await query.edit_message_text(
            '๐ก ุงูุชุฑุงุญุงุช ูููุงุญุธุงุช\n\n'
            'ุงูุฑุฌุงุก ูุชุงุจุฉ ุงูุชุฑุงุญู ุฃู ููุงุญุธุชู:',
            reply_markup=reply_markup
        )
        context.user_data['last_bot_message_id'] = message.message_id
        return FEEDBACK_MESSAGE

    elif choice == 'problem':
        message = await query.edit_message_text(
            '๐ง ูุณู ุญู ุงููุดุงูู\n\n'
            'ุงูุฑุฌุงุก ูุตู ุงููุดููุฉ ุงูุชู ุชูุงุฌููุง ุจูุถูุญ:',
            reply_markup=reply_markup
        )
        context.user_data['last_bot_message_id'] = message.message_id
        return PROBLEM_DESCRIPTION

    # ุทูุจุงุช ุชุญุชุงุฌ ุงุณู (apology, leave)
    message = await query.edit_message_text(
        'ุงูุฑุฌุงุก ุฅุฏุฎุงู ุงุณูู ุงูุฃูู:',
        reply_markup=reply_markup
    )
    context.user_data['last_bot_message_id'] = message.message_id
    return FIRST_NAME

async def first_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุญูุธ ุงูุงุณู ุงูุฃูู ูุทูุจ ุงููููุฉ ูุน ุชูุธูู ุงูุฑุณุงุฆู"""
    await delete_previous_message(context, update.effective_chat.id)
    context.user_data['first_name'] = update.message.text

    keyboard = [[InlineKeyboardButton("๐ ุนูุฏุฉ", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await send_and_track_message(
        update, 
        context,
        f'ุฃููุงู {update.message.text}!\n\n'
        'ุงูุฑุฌุงุก ุฅุฏุฎุงู ุงููููุฉ (ุงุณู ุงูุนุงุฆูุฉ):',
        reply_markup=reply_markup
    )
    return LAST_NAME


async def last_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุญูุธ ุงููููุฉ ูุทูุจ ุงุณู ุงููุฑูู ูุน ุชูุธูู ุงูุฑุณุงุฆู"""
    await delete_previous_message(context, update.effective_chat.id)
    context.user_data['last_name'] = update.message.text

    keyboard = [[InlineKeyboardButton("๐ ุนูุฏุฉ", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await send_and_track_message(
        update, 
        context,
        'ูุง ูู ุงููุฑูู ุงูุฐู ุชูุชูู ุฅูููุ\n'
        '(ูุซุงู: ูุฑูู ุงูุฏุนู ุงูุฃููุ ุงูุฏุนู ุงูุซุงููุ ุงูุฎ)',
        reply_markup=reply_markup
    )
    return TEAM_NAME


async def team_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุญูุธ ุงุณู ุงููุฑูู ูุงูุงูุชูุงู ุญุณุจ ููุน ุงูุทูุจ ูุน ุชูุธูู ุงูุฑุณุงุฆู"""
    await delete_previous_message(context, update.effective_chat.id)
    context.user_data['team_name'] = update.message.text
    request_type = context.user_data.get('request_type')

    if request_type == 'apology':
        keyboard = [
            [InlineKeyboardButton("ุงุฌุชูุงุน", callback_data='meeting')],
            [InlineKeyboardButton("ูุจุงุฏุฑุฉ", callback_data='initiative')],
            [InlineKeyboardButton("ุขุฎุฑ", callback_data='other')],
            [InlineKeyboardButton("๐ ุนูุฏุฉ", callback_data='back_to_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await send_and_track_message(
            update, 
            context,
            '๐ ุทูุจ ุงุนุชุฐุงุฑ\n\n'
            'ูุง ูู ููุน ุงููุนุงููุฉ/ุงูุงุนุชุฐุงุฑุ',
            reply_markup=reply_markup
        )
        return APOLOGY_TYPE

    elif request_type == 'leave':
        keyboard = [[InlineKeyboardButton("๐ ุนูุฏุฉ", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await send_and_track_message(
            update, 
            context,
            '๐๏ธ ุทูุจ ุฅุฌุงุฒุฉ\n\n'
            '๐ **ููุงุญุธุฉ ูุงูุฉ:** ูุฏุฉ ุงูุฅุฌุงุฒุฉ ุงููุณููุญุฉ ูููุชุทูุน ุฎูุงู ุงูุณูุฉ ูู **ุดูุฑ ูุงุญุฏ ููุท** ููุงูุชุญุงูุงุช ู**ุงูุธุฑูู ุงููุงูุฑุฉ**.\n\n'
            'ุงูุฑุฌุงุก ุฅุฏุฎุงู **ุชุงุฑูุฎ ุจุฏุก ุงูุฅุฌุงุฒุฉ**:\n'
            '(ููุฑุฌู ุงุณุชุฎุฏุงู ุตูุบุฉ ูุงุถุญุฉ ูุซู: 2025-11-01)',
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return LEAVE_START_DATE

    return MAIN_MENU

# --------------------------------- ุฏูุงู ูุณุงุฑ ุงูุงุนุชุฐุงุฑ (APOLOGY) ---------------------------------

async def apology_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุญูุธ ููุน ุงููุนุงููุฉ ูุงูุชูุฌูู ุญุณุจ ููุนูุง (ูุจุงุฏุฑุฉ ุฃู ุบูุฑูุง)"""
    query = update.callback_query
    await query.answer()

    type_map = {
        'meeting': 'ุงุฌุชูุงุน',
        'initiative': 'ูุจุงุฏุฑุฉ',
        'other': 'ุขุฎุฑ'
    }

    type_choice = query.data
    context.user_data['apology_type'] = type_map.get(type_choice, type_choice)

    keyboard = [[InlineKeyboardButton("๐ ุนูุฏุฉ", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if type_choice == 'initiative':
        message = await query.edit_message_text(
            'ุงูุฑุฌุงุก ุฅุฏุฎุงู **ุงุณู ุงููุจุงุฏุฑุฉ** ุงูุชู ุชุนุชุฐุฑ ุนููุง:',
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        context.user_data['last_bot_message_id'] = message.message_id
        return INITIATIVE_NAME
    else:
        message = await query.edit_message_text(
            f'ุชู ุงุฎุชูุงุฑ: {context.user_data["apology_type"]}\n\n'
            'ุงูุฑุฌุงุก ูุชุงุจุฉ ุณุจุจ ุงูุงุนุชุฐุงุฑ ุจุงูุชูุตูู:',
            reply_markup=reply_markup
        )
        context.user_data['last_bot_message_id'] = message.message_id
        return APOLOGY_REASON

async def initiative_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุญูุธ ุงุณู ุงููุจุงุฏุฑุฉ ูุทูุจ ุณุจุจ ุงูุงุนุชุฐุงุฑ ูุน ุชูุธูู ุงูุฑุณุงุฆู"""
    await delete_previous_message(context, update.effective_chat.id)
    context.user_data['initiative_name'] = update.message.text

    keyboard = [[InlineKeyboardButton("๐ ุนูุฏุฉ", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await send_and_track_message(
        update,
        context,
        f'ุงููุจุงุฏุฑุฉ: {update.message.text}\n\n'
        'ุงูุฑุฌุงุก ูุชุงุจุฉ ุณุจุจ ุงูุงุนุชุฐุงุฑ ุจุงูุชูุตูู:',
        reply_markup=reply_markup
    )
    return APOLOGY_REASON


async def apology_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุญูุธ ุณุจุจ ุงูุงุนุชุฐุงุฑ ูุทูุจ ุงูููุงุญุธุงุช ูุน ุชูุธูู ุงูุฑุณุงุฆู"""
    await delete_previous_message(context, update.effective_chat.id)
    context.user_data['apology_reason'] = update.message.text

    keyboard = [
        [InlineKeyboardButton("โญ๏ธ ุชุฎุทู", callback_data='skip_apology_notes')],
        [InlineKeyboardButton("๐ ุนูุฏุฉ", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await send_and_track_message(
        update,
        context,
        'ูู ูุฏูู ุฃู ููุงุญุธุงุช ุฅุถุงููุฉ ุจุฎุตูุต ุงูุงุนุชุฐุงุฑุ\n'
        '(ุงูุชุจ ููุงุญุธุงุชู ุฃู ุงุถุบุท ุชุฎุทู)',
        reply_markup=reply_markup
    )
    return APOLOGY_NOTES


async def apology_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุญูุธ ุงูููุงุญุธุงุช ูุฅุฑุณุงู ุงูุทูุจ ูููุฏูุฑ"""
    # ูุง ุญุงุฌุฉ ูุญุฐู ุงูุฑุณุงุฆู ููุงุ ุณูููู ุจุงูุชุญุฑูุฑ ุฃู ุฅุฑุณุงู ุฑุณุงูุฉ ุฌุฏูุฏุฉ
    message = update.message
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        context.user_data['apology_notes'] = 'ูุง ุชูุฌุฏ'
        message = query.message
    else:
        await delete_previous_message(context, update.effective_chat.id)
        context.user_data['apology_notes'] = update.message.text


    user = update.effective_user
    request_id = context.user_data.get('request_id', 'N/A')
    user_id = user.id
    request_type = context.user_data.get('request_type', 'apology')
    first_name = context.user_data.get('first_name', 'ุบูุฑ ูุญุฏุฏ')
    last_name = context.user_data.get('last_name', 'ุบูุฑ ูุญุฏุฏ')
    team_name = context.user_data.get('team_name', 'ุบูุฑ ูุญุฏุฏ')
    apology_type = context.user_data.get('apology_type', 'ุบูุฑ ูุญุฏุฏ')
    apology_reason = context.user_data.get('apology_reason', 'ุบูุฑ ูุญุฏุฏ')
    apology_notes_val = context.user_data.get('apology_notes', 'ูุง ุชูุฌุฏ')

    initiative_name_val = context.user_data.get('initiative_name')
    if initiative_name_val:
        details_line = f'โข ุงูููุน: {apology_type} ({initiative_name_val})\n'
        admin_type_line = f'โข ููุน ุงูุงุนุชุฐุงุฑ: {apology_type} ({initiative_name_val})\n'
    else:
        details_line = f'โข ุงูููุน: {apology_type}\n'
        admin_type_line = f'โข ููุน ุงูุงุนุชุฐุงุฑ: {apology_type}\n'

    volunteer_message = (
        f'โ **ุชู ุงุณุชูุงู ุทูุจ ุงูุงุนุชุฐุงุฑ!**\n\n'
        f'๐ ุฑูู ุงูุทูุจ: `{request_id}`\n\n'
        f'๐ **ููุฎุต ุงูุทูุจ:**\n'
        f'โข ุงูุงุณู: {first_name} {last_name}\n'
        f'โข ุงููุฑูู: {team_name}\n'
        f'{details_line}'
        f'โข ุงูุณุจุจ: {apology_reason}\n'
        f'โข ููุงุญุธุงุช: {apology_notes_val}\n\n'
        f'**ุฃุซุฑู ููุฌูุฏ ุฏุงุฆูุงู.. ุดูุฑุงู ูุฃูู ูุนูุง ๐**\n\n'
        f'ุณูุชู ูุฑุงุฌุนุฉ ุทูุจู ูุฑูุจุงู. **ุฅุฐุง ุชุฃุฎุฑ ุงูุฑุฏ ูุฃูุซุฑ ูู ุณุงุนุฉุ ูุฑุฌู ูุฑุงุณูุฉ {HR_CONTACT_INFO} ูููุชุงุจุนุฉ ุงูููุฑูุฉ.**'
    )

    admin_message = (
        f'๐ **ุทูุจ ุงุนุชุฐุงุฑ ุฌุฏูุฏ**\n'
        f'โโโโโโโโโโโโโโโโโ\n'
        f'๐ ุฑูู ุงูุทูุจ: `{request_id}`\n'
        f'๐ค ุงูุงุณู: {first_name} {last_name}\n'
        f'๐ฅ ุงููุฑูู: {team_name}\n'
        f'๐ ุงููุนุฑู: @{user.username or "ูุง ููุฌุฏ"}\n'
        f'๐ ุฑูู ุงููุณุชุฎุฏู: {user_id}\n\n'
        f'๐ **ุงูุชูุงุตูู:**\n'
        f'{admin_type_line}'
        f'โข ุณุจุจ ุงูุงุนุชุฐุงุฑ: {apology_reason}\n'
        f'โข ููุงุญุธุงุช: {apology_notes_val}\n'
        f'โโโโโโโโโโโโโโโโโ'
    )

    admin_keyboard = [
        [
            InlineKeyboardButton("โ ููุงููุฉ", callback_data=f'action|approve|{request_type}|{request_id}|{user_id}'),
            InlineKeyboardButton("โ ุฑูุถ ุงูุทูุจ", callback_data=f'action|reject|{request_type}|{request_id}|{user_id}')
        ]
    ]
    admin_reply_markup = InlineKeyboardMarkup(admin_keyboard)

    keyboard = [
        [InlineKeyboardButton("๐ ุทูุจ ุฌุฏูุฏ", callback_data='new_request')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await message.edit_text(volunteer_message, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await message.reply_text(volunteer_message, reply_markup=reply_markup, parse_mode='Markdown')

    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_message,
            reply_markup=admin_reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฑุณุงูุฉ ูููุฏูุฑ: {e}")

    context.user_data.clear()
    return ConversationHandler.END


# --------------------------------- ุฏูุงู ูุณุงุฑ ุงูุฅุฌุงุฒุฉ (LEAVE) ---------------------------------

async def leave_start_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุญูุธ ุชุงุฑูุฎ ุจุฏุก ุงูุฅุฌุงุฒุฉ ูุทูุจ ุชุงุฑูุฎ ุงูุงูุชูุงุก ูุน ุชูุธูู ุงูุฑุณุงุฆู"""
    await delete_previous_message(context, update.effective_chat.id)
    context.user_data['leave_start_date'] = update.message.text

    keyboard = [[InlineKeyboardButton("๐ ุนูุฏุฉ", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await send_and_track_message(
        update, 
        context,
        f'ุชุงุฑูุฎ ุงูุจุฏุก: {update.message.text}\n\n'
        'ุงูุฑุฌุงุก ุฅุฏุฎุงู **ุชุงุฑูุฎ ุงูุชูุงุก ุงูุฅุฌุงุฒุฉ**:',
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return LEAVE_END_DATE

async def leave_end_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุญูุธ ุชุงุฑูุฎ ุงูุชูุงุก ุงูุฅุฌุงุฒุฉ ูุทูุจ ุงูุณุจุจ ูุน ุชูุธูู ุงูุฑุณุงุฆู"""
    await delete_previous_message(context, update.effective_chat.id)
    context.user_data['leave_end_date'] = update.message.text

    keyboard = [[InlineKeyboardButton("๐ ุนูุฏุฉ", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await send_and_track_message(
        update, 
        context,
        f'ุชุงุฑูุฎ ุงูุงูุชูุงุก: {update.message.text}\n\n'
        'ุงูุฑุฌุงุก ูุชุงุจุฉ ุณุจุจ ุทูุจ ุงูุฅุฌุงุฒุฉ ุจูุถูุญ:',
        reply_markup=reply_markup
    )
    return LEAVE_REASON


async def leave_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุญูุธ ุณุจุจ ุงูุฅุฌุงุฒุฉ ูุทูุจ ุงูููุงุญุธุงุช ูุน ุชูุธูู ุงูุฑุณุงุฆู"""
    await delete_previous_message(context, update.effective_chat.id)
    context.user_data['leave_reason'] = update.message.text

    keyboard = [
        [InlineKeyboardButton("โญ๏ธ ุชุฎุทู", callback_data='skip_leave_notes')],
        [InlineKeyboardButton("๐ ุนูุฏุฉ", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await send_and_track_message(
        update,
        context,
        'ูู ูุฏูู ุฃู ููุงุญุธุงุช ุฅุถุงููุฉ ุจุฎุตูุต ุงูุฅุฌุงุฒุฉุ\n'
        '(ุงูุชุจ ููุงุญุธุงุชู ุฃู ุงุถุบุท ุชุฎุทู)',
        reply_markup=reply_markup
    )
    return LEAVE_NOTES


async def leave_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุญูุธ ุงูููุงุญุธุงุช ูุฅุฑุณุงู ุงูุทูุจ ูููุฏูุฑ"""
    message = update.message
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        context.user_data['leave_notes'] = 'ูุง ุชูุฌุฏ'
        message = query.message
    else:
        await delete_previous_message(context, update.effective_chat.id)
        context.user_data['leave_notes'] = update.message.text

    user = update.effective_user
    request_id = context.user_data.get('request_id', 'N/A')
    user_id = user.id
    request_type = context.user_data.get('request_type', 'leave')
    first_name = context.user_data.get('first_name', 'ุบูุฑ ูุญุฏุฏ')
    last_name = context.user_data.get('last_name', 'ุบูุฑ ูุญุฏุฏ')
    team_name = context.user_data.get('team_name', 'ุบูุฑ ูุญุฏุฏ')
    leave_start_date_val = context.user_data.get('leave_start_date', 'ุบูุฑ ูุญุฏุฏ')
    leave_end_date_val = context.user_data.get('leave_end_date', 'ุบูุฑ ูุญุฏุฏ')
    leave_reason_val = context.user_data.get('leave_reason', 'ุบูุฑ ูุญุฏุฏ')
    leave_notes_val = context.user_data.get('leave_notes', 'ูุง ุชูุฌุฏ')

    volunteer_message = (
        f'โ **ุชู ุงุณุชูุงู ุทูุจ ุงูุฅุฌุงุฒุฉ!**\n\n'
        f'๐ ุฑูู ุงูุทูุจ: `{request_id}`\n\n'
        f'๐ **ููุฎุต ุงูุทูุจ:**\n'
        f'โข ุงูุงุณู: {first_name} {last_name}\n'
        f'โข ุงููุฑูู: {team_name}\n'
        f'โข ุชุงุฑูุฎ ุงูุจุฏุก: {leave_start_date_val}\n'
        f'โข ุชุงุฑูุฎ ุงูุงูุชูุงุก: {leave_end_date_val}\n'
        f'โข ุงูุณุจุจ: {leave_reason_val}\n'
        f'โข ููุงุญุธุงุช: {leave_notes_val}\n\n'
        f'**ุฃุซุฑู ููุฌูุฏ ุฏุงุฆูุงู.. ุดูุฑุงู ูุฃูู ูุนูุง ๐**\n\n'
        f'ุณูุชู ูุฑุงุฌุนุฉ ุทูุจู ูุฑูุจุงู.'
    )

    admin_message = (
        f'๐๏ธ **ุทูุจ ุฅุฌุงุฒุฉ ุฌุฏูุฏ**\n'
        f'โโโโโโโโโโโโโโโโโ\n'
        f'๐ ุฑูู ุงูุทูุจ: `{request_id}`\n'
        f'๐ค ุงูุงุณู: {first_name} {last_name}\n'
        f'๐ฅ ุงููุฑูู: {team_name}\n'
        f'๐ ุงููุนุฑู: @{user.username or "ูุง ููุฌุฏ"}\n'
        f'๐ ุฑูู ุงููุณุชุฎุฏู: {user_id}\n\n'
        f'๐ **ุงูุชูุงุตูู:**\n'
        f'โข ุชุงุฑูุฎ ุจุฏุก ุงูุฅุฌุงุฒุฉ: {leave_start_date_val}\n'
        f'โข ุชุงุฑูุฎ ุงูุชูุงุก ุงูุฅุฌุงุฒุฉ: {leave_end_date_val}\n'
        f'โข ุณุจุจ ุงูุฅุฌุงุฒุฉ: {leave_reason_val}\n'
        f'โข ููุงุญุธุงุช: {leave_notes_val}\n'
        f'โโโโโโโโโโโโโโโโโ'
    )

    admin_keyboard = [
        [
            InlineKeyboardButton("โ ููุงููุฉ", callback_data=f'action|approve|{request_type}|{request_id}|{user_id}'),
            InlineKeyboardButton("โ ุฑูุถ ุงูุทูุจ", callback_data=f'action|reject|{request_type}|{request_id}|{user_id}')
        ]
    ]
    admin_reply_markup = InlineKeyboardMarkup(admin_keyboard)

    keyboard = [
        [InlineKeyboardButton("๐ ุทูุจ ุฌุฏูุฏ", callback_data='new_request')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await message.edit_text(volunteer_message, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await message.reply_text(volunteer_message, reply_markup=reply_markup, parse_mode='Markdown')

    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_message,
            reply_markup=admin_reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฑุณุงูุฉ ูููุฏูุฑ: {e}")

    context.user_data.clear()
    return ConversationHandler.END

# --------------------------------- ุฏูุงู ูุณุงุฑ ุงููุดุงูู ูุงูุงูุชุฑุงุญุงุช ---------------------------------

async def problem_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุญูุธ ูุตู ุงููุดููุฉ ูุทูุจ ุงูููุงุญุธุงุช ูุน ุชูุธูู ุงูุฑุณุงุฆู"""
    await delete_previous_message(context, update.effective_chat.id)
    context.user_data['problem_description'] = update.message.text

    keyboard = [
        [InlineKeyboardButton("โญ๏ธ ุชุฎุทู", callback_data='skip_problem_notes')],
        [InlineKeyboardButton("๐ ุนูุฏุฉ", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await send_and_track_message(
        update,
        context,
        'ูู ูุฏูู ุฃู ููุงุญุธุงุช ุฅุถุงููุฉ ุฃู ูุนูููุงุช ุชุณุงุนุฏ ูู ุญู ุงููุดููุฉุ\n'
        '(ุงูุชุจ ููุงุญุธุงุชู ุฃู ุงุถุบุท ุชุฎุทู)',
        reply_markup=reply_markup
    )
    return PROBLEM_NOTES


async def problem_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุญูุธ ุงูููุงุญุธุงุช ูุฅุฑุณุงู ุงูุจูุงุบ ูููุฏูุฑ"""
    message = update.message
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        context.user_data['problem_notes'] = 'ูุง ุชูุฌุฏ'
        message = query.message
    else:
        await delete_previous_message(context, update.effective_chat.id)
        context.user_data['problem_notes'] = update.message.text

    user = update.effective_user
    request_id = context.user_data.get('request_id', 'N/A')
    user_id = user.id
    request_type = context.user_data.get('request_type', 'problem')
    problem_description = context.user_data.get('problem_description', 'ุบูุฑ ูุญุฏุฏ')
    problem_notes_val = context.user_data.get('problem_notes', 'ูุง ุชูุฌุฏ')

    volunteer_message = (
        f'โ **ุชู ุงุณุชูุงู ุจูุงุบ ุงููุดููุฉ!**\n\n'
        f'๐ ุฑูู ุงูุจูุงุบ: `{request_id}`\n\n'
        f'๐ **ููุฎุต ุงูุจูุงุบ:**\n'
        f'โข ุงููุดููุฉ: {problem_description}\n'
        f'โข ููุงุญุธุงุช: {problem_notes_val}\n\n'
        f'**ุฃุซุฑู ููุฌูุฏ ุฏุงุฆูุงู.. ุดูุฑุงู ูุฃูู ูุนูุง ๐**\n\n'
        f'ุณูุชู ุงูุนูู ุนูู ุญู ุงููุดููุฉ ูุฑูุจุงู.'
    )

    admin_message = (
        f'๐ง **ุจูุงุบ ูุดููุฉ ุฌุฏูุฏ**\n'
        f'โโโโโโโโโโโโโโโโโ\n'
        f'๐ ุฑูู ุงูุจูุงุบ: `{request_id}`\n'
        f'๐ค ูู: {user.first_name} {user.last_name or ""}\n'
        f'๐ ุงููุนุฑู: @{user.username or "ูุง ููุฌุฏ"}\n'
        f'๐ ุฑูู ุงููุณุชุฎุฏู: {user_id}\n\n'
        f'๐ **ุงูุชูุงุตูู:**\n'
        f'โข ูุตู ุงููุดููุฉ: {problem_description}\n'
        f'โข ููุงุญุธุงุช: {problem_notes_val}\n'
        f'โโโโโโโโโโโโโโโโโ'
    )

    admin_keyboard = [
        [
            InlineKeyboardButton("โ ุชู ุงูุญู", callback_data=f'action|approve|{request_type}|{request_id}|{user_id}'),
            InlineKeyboardButton("โ ูุชุทูุจ ูุชุงุจุนุฉ", callback_data=f'action|reject|{request_type}|{request_id}|{user_id}')
        ]
    ]
    admin_reply_markup = InlineKeyboardMarkup(admin_keyboard)

    keyboard = [
        [InlineKeyboardButton("๐ ุทูุจ ุฌุฏูุฏ", callback_data='new_request')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await message.edit_text(volunteer_message, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await message.reply_text(volunteer_message, reply_markup=reply_markup, parse_mode='Markdown')

    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_message,
            reply_markup=admin_reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฑุณุงูุฉ ูููุฏูุฑ: {e}")

    context.user_data.clear()
    return ConversationHandler.END


async def feedback_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุงุณุชูุงู ุงูุงูุชุฑุงุญ ูุฅุฑุณุงูู ูููุฏูุฑ"""
    await delete_previous_message(context, update.effective_chat.id)
    
    feedback = update.message.text
    user = update.effective_user
    request_id = context.user_data.get('request_id', 'N/A')
    user_id = user.id
    request_type = context.user_data.get('request_type', 'feedback')

    volunteer_message = (
        f'โ **ุดูุฑุงู ูู ุนูู ุงูุชุฑุงุญู!**\n\n'
        f'๐ ุฑูู ุงูุฑุณุงูุฉ: `{request_id}`\n\n'
        f'**ุฃุซุฑู ููุฌูุฏ ุฏุงุฆูุงู.. ุดูุฑุงู ูุฃูู ูุนูุง ๐**\n\n'
        f'ุชู ุฅุฑุณุงู ุฑุณุงูุชู ูุณูููู ุจูุฑุงุฌุนุชูุง ูุฑูุจุงู.'
    )

    admin_message = (
        f'๐ก **ุงูุชุฑุงุญ/ููุงุญุธุฉ ุฌุฏูุฏุฉ**\n'
        f'โโโโโโโโโโโโโโโโโ\n'
        f'๐ ุฑูู ุงูุฑุณุงูุฉ: `{request_id}`\n'
        f'๐ค ูู: {user.first_name} {user.last_name or ""}\n'
        f'๐ ุงููุนุฑู: @{user.username or "ูุง ููุฌุฏ"}\n'
        f'๐ ุฑูู ุงููุณุชุฎุฏู: {user_id}\n\n'
        f'๐ **ุงูุฑุณุงูุฉ:**\n{feedback}\n'
        f'โโโโโโโโโโโโโโโโโ'
    )

    admin_keyboard = [
        [
            InlineKeyboardButton("โ ุชู ุงูุงุทูุงุน", callback_data=f'action|approve|{request_type}|{request_id}|{user_id}'),
            InlineKeyboardButton("โ ูุชุทูุจ ูุชุงุจุนุฉ", callback_data=f'action|reject|{request_type}|{request_id}|{user_id}')
        ]
    ]
    admin_reply_markup = InlineKeyboardMarkup(admin_keyboard)

    keyboard = [
        [InlineKeyboardButton("๐ ุทูุจ ุฌุฏูุฏ", callback_data='new_request')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(volunteer_message, reply_markup=reply_markup, parse_mode='Markdown')

    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_message,
            reply_markup=admin_reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฑุณุงูุฉ ูููุฏูุฑ: {e}")

    context.user_data.clear()
    return ConversationHandler.END


# --------------------------------- ุฏูุงู ุงููุดุฑู ูุฅุถุงูุฉ ูุชุทูุน ---------------------------------

async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ููุทุฉ ุฏุฎูู ุงููุดุฑู (ุงูุฃูุฑ /admin)"""
    chat_id = update.effective_chat.id
    if not is_admin(chat_id):
        await update.message.reply_text("โ ุบูุฑ ูุตุฑุญ ูู ุจุงุณุชุฎุฏุงู ูุฐุง ุงูุฃูุฑ.")
        return ConversationHandler.END
    
    # ูุญุงููุฉ ุญุฐู ุฑุณุงูุฉ ุงูุฃูุฑ /admin
    if update.message:
        try:
             await context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
        except Exception:
            pass # ูุง ููู ุฅุฐุง ูุดู ุงูุญุฐู

    keyboard = [
        [InlineKeyboardButton("โ ุฅุถุงูุฉ ูุชุทูุน ุฌุฏูุฏ", callback_data='admin_add_volunteer')],
        [InlineKeyboardButton("๐ ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # ุงุณุชุฎุฏุงู send_and_track_message ูุถูุงู ุชุฎุฒูู ID ุงูุฑุณุงูุฉ ูููุฑุฉ ุงูุฃููู
    await send_and_track_message(
        update, 
        context,
        '๐ ูุฑุญุจุงู ุจู ูุง ูุดุฑู!\n\n'
        'ููุญุฉ ุชุญูู ุงููุชุทูุนูู:',
        reply_markup=reply_markup
    )
    return ADMIN_MENU

async def admin_add_volunteer_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ูุทุงูุจุฉ ุงููุดุฑู ุจุฅุฏุฎุงู ุงูุงุณู ุงููุงูู"""
    query = update.callback_query
    await query.answer()

    keyboard = [[InlineKeyboardButton("๐ ุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = await query.edit_message_text(
        'โ ุฅุถุงูุฉ ูุชุทูุน ุฌุฏูุฏ\n\n'
        'ุงูุฑุฌุงุก ุฅุฏุฎุงู **ุงูุงุณู ุงููุงูู ูููุชุทูุน** (ููุง ุณูุธูุฑ ูู ุงูููุงุฆู):',
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    context.user_data['last_bot_message_id'] = message.message_id
    return ADD_VOLUNTEER_FULL_NAME

async def admin_get_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุญูุธ ุงูุงุณู ุงููุงูู ูุงููุทุงูุจุฉ ุจุงุฎุชูุงุฑ ุงููุฑูู ูุน ุชูุธูู ุงูุฑุณุงุฆู"""
    await delete_previous_message(context, update.effective_chat.id)
    context.user_data['new_volunteer_full_name'] = update.message.text
    
    teams = get_all_teams()
    
    if not teams:
        await update.message.reply_text(
            'โ ูุง ุชูุฌุฏ ูุฑู ูุณุฌูุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุญุงููุงู!\n'
            'ุงูุฑุฌุงุก ุฅุถุงูุฉ ูุฑู ูุฏููุงู ุฃููุงู ุซู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ุนุจุฑ /admin.'
        )
        return await admin_start(update, context)

    # ุฅูุดุงุก ุฃุฒุฑุงุฑ ุงููุฑู ุฏููุงููููุงู
    keyboard = [[InlineKeyboardButton(team['name'], callback_data=f"team_id|{team['id']}")] for team in teams]
    keyboard.append([InlineKeyboardButton("๐ ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data='back_to_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await send_and_track_message(
        update, 
        context,
        f"ุชู ุชุณุฌูู ุงูุงุณู: {update.message.text}\n\n"
        "ุงูุฑุฌุงุก ุงุฎุชูุงุฑ **ุงููุฑูู** ุงูุฐู ุณููุถู ุฅููู ุงููุชุทูุน:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return ADD_VOLUNTEER_SELECT_TEAM

async def admin_select_team(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุญูุธ ุงููุฑูู ูุงููุทุงูุจุฉ ุจุฑูู ูุนุฑู ุชูููุฌุฑุงู"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split('|')
    team_id = int(data[1])
    
    # ุฌูุจ ุงุณู ุงููุฑูู
    conn = get_db_connection()
    team_row = conn.execute("SELECT name FROM Teams WHERE id = ?", (team_id,)).fetchone()
    conn.close()
    team_name = team_row['name'] if team_row else 'ุบูุฑ ูุนุฑูู'
    
    context.user_data['new_volunteer_team_id'] = team_id
    context.user_data['new_volunteer_team_name'] = team_name

    keyboard = [[InlineKeyboardButton("๐ ุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await query.edit_message_text(
        f"โ ุชู ุงุฎุชูุงุฑ ุงููุฑูู: **{team_name}**\n\n"
        "ุงูุฎุทูุฉ ุงูุฃุฎูุฑุฉ: ุงูุฑุฌุงุก ุฅุฑุณุงู **ุฑูู ูุนุฑู ุชูููุฌุฑุงู (Telegram ID)** ุงูุฎุงุต ุจุงููุชุทูุน.\n"
        "*(ูููู ุงูุญุตูู ุนููู ุนุจุฑ ุจูุชุงุช ูุซู @userinfobot)*\n\n"
        "ูุซุงู: `123456789`",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    context.user_data['last_bot_message_id'] = message.message_id
    return ADD_VOLUNTEER_FINALIZE

async def admin_finalize_volunteer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุงุณุชูุงู ุฑูู ุชูููุฌุฑุงู ูุญูุธ ุงููุชุทูุน ูู ุงููุงุนุฏุฉ"""
    await delete_previous_message(context, update.effective_chat.id)
    telegram_id_str = update.message.text
    
    
    # ุงูุชุญูู ูู ุฃู ุงูุฅุฏุฎุงู ูู ุฑูู
    if not telegram_id_str.isdigit():
        keyboard = [[InlineKeyboardButton("๐ ุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            'โ **ุฅุฏุฎุงู ุบูุฑ ุตุงูุญ!**\n'
            'ุงูุฑุฌุงุก ุฅุฏุฎุงู ุฑูู ูุนุฑู ุชูููุฌุฑุงู **ููุท** (ูุซุงู: 123456789).',
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        # ุงูุนูุฏุฉ ูููุณ ุงูุฎุทูุฉ
        return ADD_VOLUNTEER_FINALIZE
        
    telegram_id = int(telegram_id_str)
    full_name = context.user_data.get('new_volunteer_full_name')
    team_id = context.user_data.get('new_volunteer_team_id')
    team_name = context.user_data.get('new_volunteer_team_name')

    # ุฅุถุงูุฉ ุฅูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    success = add_new_volunteer_to_db(telegram_id, full_name, team_id)
    
    keyboard = [[InlineKeyboardButton("๐ ุทูุจ ุฌุฏูุฏ", callback_data='new_request')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if success:
        await update.message.reply_text(
            f"โ **ุชูุช ุฅุถุงูุฉ ุงููุชุทูุน ุจูุฌุงุญ!**\n\n"
            f"โข ุงูุงุณู: **{full_name}**\n"
            f"โข ุงููุฑูู: **{team_name}**\n"
            f"โข ูุนุฑู ุชูููุฌุฑุงู: `{telegram_id}`",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            f"โ **ูุดู ูู ุฅุถุงูุฉ ุงููุชุทูุน!**\n\n"
            f"ููุงู ูุชุทูุน ุขุฎุฑ ูุณุฌู ุจุงููุนู ุจููุณ ุฑูู ูุนุฑู ุชูููุฌุฑุงู (`{telegram_id}`).\n"
            f"ุงูุฑุฌุงุก ุงูุชุญูู ูู ุงูุฑูู ูุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ุนุจุฑ /admin.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    context.user_data.clear()
    return ConversationHandler.END


# --------------------------------- ุฏูุงู ุงูุชุญูู ูุงูุฅุฌุฑุงุกุงุช ---------------------------------

async def handle_admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ูุนุงูุฌุฉ ุฃุฒุฑุงุฑ ุงูููุงููุฉ/ุงูุฑูุถ ูู ุฑุณุงูุฉ ุงููุดุฑู"""
    query = update.callback_query
    await query.answer()

    data = query.data.split('|')
    action = data[1]
    request_type = data[2]
    request_id = data[3]
    user_id = data[4]

    admin_user = query.from_user
    request_title = get_request_title(request_type)

    try:
        if action == 'approve':
            user_notification = f'โ ุชูุงูููุง! ุชูุช **ุงูููุงููุฉ** ุนูู {request_title} ุงูุฎุงุต ุจู ุจุฑูู `{request_id}`.'
        else:
            user_notification = (
                f'โ ูุนุชุฐุฑ! ุชู **ุฑูุถ** {request_title} ุงูุฎุงุต ุจู ุจุฑูู `{request_id}`.\n'
                f'ููุงุณุชุนูุงู ุนู ุงูุณุจุจุ ูุฑุฌู **ูุฑุงุณูุฉ {HR_CONTACT_INFO}**.'
            )

        await context.bot.send_message(
            chat_id=user_id,
            text=user_notification,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฅุดุนุงุฑ ูููุณุชุฎุฏู {user_id}: {e}")

    status_text = "ุชูุช ุงูููุงููุฉ โ" if action == 'approve' else "ุชู ุงูุฑูุถ โ"

    original_text = query.message.text
    updated_text = (
        f"{original_text}\n\n"
        f"**โโโโโโโโโโโโโโโโโ**\n"
        f"**๐ ุญุงูุฉ ุงูุทูุจ:** {status_text}\n"
        f"**โ๏ธ ุจูุงุณุทุฉ:** {admin_user.first_name} (@{admin_user.username or 'ูุง ููุฌุฏ'})"
    )

    try:
        await query.edit_message_text(
            text=updated_text,
            reply_markup=None, 
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุชุญุฏูุซ ุฑุณุงูุฉ ุงููุดุฑู: {e}")

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ - ูุชู ุงุณุชุฏุนุงุคูุง ุนุจุฑ CallbackQueryHandler"""
    query = update.callback_query
    if query:
        await query.answer()
        
    # ููุง ูุชู ุชูุธูู ุงูุฑุณุงูุฉ ุงูุชู ุชู ุงูุถุบุท ุนูู ุงูุฒุฑ ูููุง
    context.user_data.clear()
    
    # ูุญุงูุธ ุนูู ุงุณุชุฎุฏุงู startุ ููู ุชููู ุจู edit_message_text ุฃู send_message
    return await start(update, context) 

async def new_request_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ูุนุงูุฌุฉ ุฒุฑ ุทูุจ ุฌุฏูุฏ"""
    return await start(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุฅูุบุงุก ุงููุญุงุฏุซุฉ"""
    await update.message.reply_text(
        'โ **ุชู ุฅูุบุงุก ุงูุทูุจ.**\n'
        'ููููู ุงูุจุฏุก ูู ุฌุฏูุฏ ุจุฅุฑุณุงู /start',
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='Markdown'
    )
    context.user_data.clear()
    return ConversationHandler.END

# --------------------------------- ุงูุชููุฆุฉ ูุงูุชุดุบูู ---------------------------------

application = None

def initialize_application() -> None:
    """
    ุชููู ุจุฅุนุฏุงุฏ ูุงุฆู ุงูุชุทุจูู (Application) ูุฅุถุงูุฉ ุฌููุน ุงูู Handlers.
    ุชูููุฐ ูุฑุฉ ูุงุญุฏุฉ ููุท ุนูุฏ ุจุฏุก ุชุดุบูู ุงูุฎุงุฏู.
    """
    global application 
    
    if not BOT_TOKEN or not ADMIN_CHAT_ID:
        raise ValueError("BOT_TOKEN or ADMIN_CHAT_ID environment variables not set.")

    # ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช
    setup_database()

    # 1. ุจูุงุก ุงูุชุทุจูู
    application = Application.builder().token(BOT_TOKEN).build()

    # 2. ุฅุถุงูุฉ ุงูู Handlers
    # ูุฌุจ ุชุนุฑูู ูุนุงูุฌ ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ ุฃููุงู ูุถูุงู ูุฌูุฏู ูู ูุทุงู ุงูููููุฑุฒูุดู
    back_to_menu_handler = CallbackQueryHandler(back_to_menu, pattern='^back_to_menu$')
    text_message_filter = filters.TEXT & ~filters.COMMAND
    
    admin_action_handler = CallbackQueryHandler(handle_admin_action, pattern=r'^action\|(approve|reject)\|.+$')
    
    # ุญุฐู ูุนุงูุฌ admin_command_handler ุงูุฎุงุฑุฌู ูุถูุงู ุนุฏู ุชุฏุงุฎู ุชุฏูู ุงููุญุงุฏุซุฉ
    # application.add_handler(CommandHandler('admin', admin_start))

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CommandHandler('admin', admin_start), 
            CallbackQueryHandler(new_request_handler, pattern='^new_request$')
        ],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(main_menu_choice, pattern='^(apology|leave|feedback|problem|motivational_gift|references_menu)$') 
            ],
            
            # ุญุงูุงุช ุงูุทูุจุงุช ุงูุฃุณุงุณูุฉ (back_to_menu_handler ููุฏุฑุฌ ุฃููุงู)
            FIRST_NAME: [back_to_menu_handler, MessageHandler(text_message_filter, first_name)],
            LAST_NAME: [back_to_menu_handler, MessageHandler(text_message_filter, last_name)],
            TEAM_NAME: [back_to_menu_handler, MessageHandler(text_message_filter, team_name)],
            
            # ุญุงูุงุช ูุณุงุฑ ุงูุงุนุชุฐุงุฑ
            APOLOGY_TYPE: [
                back_to_menu_handler,
                CallbackQueryHandler(apology_type, pattern='^(meeting|initiative|other)$')
            ],
            INITIATIVE_NAME: [back_to_menu_handler, MessageHandler(text_message_filter, initiative_name)],
            APOLOGY_REASON: [back_to_menu_handler, MessageHandler(text_message_filter, apology_reason)],
            APOLOGY_NOTES: [
                back_to_menu_handler,
                CallbackQueryHandler(apology_notes, pattern='^skip_apology_notes$'),
                MessageHandler(text_message_filter, apology_notes)
            ],

            # ุญุงูุงุช ูุณุงุฑ ุงูุฅุฌุงุฒุฉ
            LEAVE_START_DATE: [back_to_menu_handler, MessageHandler(text_message_filter, leave_start_date)],
            LEAVE_END_DATE: [back_to_menu_handler, MessageHandler(text_message_filter, leave_end_date)],
            LEAVE_REASON: [back_to_menu_handler, MessageHandler(text_message_filter, leave_reason)],
            LEAVE_NOTES: [
                back_to_menu_handler,
                CallbackQueryHandler(leave_notes, pattern='^skip_leave_notes$'),
                MessageHandler(text_message_filter, leave_notes)
            ],

            # ุญุงูุงุช ูุณุงุฑ ุงููุดุงูู
            PROBLEM_DESCRIPTION: [back_to_menu_handler, MessageHandler(text_message_filter, problem_description)],
            PROBLEM_NOTES: [
                back_to_menu_handler,
                CallbackQueryHandler(problem_notes, pattern='^skip_problem_notes$'),
                MessageHandler(text_message_filter, problem_notes)
            ],

            # ุญุงูุงุช ูุณุงุฑ ุงูุงูุชุฑุงุญุงุช
            FEEDBACK_MESSAGE: [back_to_menu_handler, MessageHandler(text_message_filter, feedback_message)],
            
            # ุญุงูุงุช ุงููุดุฑู
            ADMIN_MENU: [
                # ุชู ุงูุชุฃูุฏ ูู ุฃู ูุฐุง ุงููุนุงูุฌ ููุชูุท ุงูุฒุฑ ููุนูู
                CallbackQueryHandler(admin_add_volunteer_prompt, pattern='^admin_add_volunteer$'),
                back_to_menu_handler, # ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ
            ],
            ADD_VOLUNTEER_FULL_NAME: [back_to_menu_handler, MessageHandler(text_message_filter, admin_get_full_name)],
            ADD_VOLUNTEER_SELECT_TEAM: [
                back_to_menu_handler, 
                CallbackQueryHandler(admin_select_team, pattern=r'^team_id\|\d+$')
            ],
            ADD_VOLUNTEER_FINALIZE: [back_to_menu_handler, MessageHandler(text_message_filter, admin_finalize_volunteer)],
            
            # ุญุงูุฉ ุงููุฑุงุฌุน ุงูุฌุฏูุฏุฉ
            REFERENCES_MENU: [back_to_menu_handler] 
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    application.add_handler(admin_action_handler)
    
    # 3. ุฅุนุฏุงุฏ ุงูู Webhook
    if WEBHOOK_URL:
        application.run_webhook( 
            listen="0.0.0.0",
            port=PORT,
            url_path=BOT_TOKEN,
            webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}"
        )
        logger.info(f"ุงูููุจ ููู ุชู ุฅุนุฏุงุฏู: {WEBHOOK_URL}/{BOT_TOKEN}")

# ** ูุชู ุงุณุชุฏุนุงุก ุฏุงูุฉ ุงูุชููุฆุฉ ุนูุฏ ุชุญููู ุงููุญุฏุฉ (Module) **
initialize_application()


# --------------------------------- ุฏุงูุฉ WSGI ุงููุณูุทุฉ (ูุชุดุบูู Gunicorn) ---------------------------------
def wsgi_app(environ, start_response):
    """
    ุฏุงูุฉ WSGI ุงููุณูุทุฉ ุงูุชู ูุณุชุฏุนููุง Gunicorn. 
    """
    if application is None:
        # ุฅุฐุง ูุดูุช ุงูุชููุฆุฉุ ุฃุนุฏ 500
        status = '500 INTERNAL SERVER ERROR'
        headers = [('Content-type', 'text/plain')]
        start_response(status, headers)
        return [b"Application not initialized."]
        
    return application.webhooks(environ, start_response)


# --------------------------------- ุฏุงูุฉ ุงูุชุดุบูู ุงููุญููุฉ (ููุชุทููุฑ ููุท) ---------------------------------

if __name__ == '__main__':
    if not WEBHOOK_URL:
        if application:
            logger.info("ูุชู ุงูุชุดุบูู ุจู Polling (ุชุทููุฑ ูุญูู).")
            application.run_polling(allowed_updates=Update.ALL_TYPES)
    else:
        logger.info("ุชู ุงูุชููุฆุฉุ ููู ุงููุชููุน ุฃู ูุชู ุงูุชุดุบูู ุนุจุฑ Gunicorn.")

