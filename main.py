.import logging
import os
import time
import sqlite3 
import random # โ ุฌุฏูุฏ: ูุงุณุชุฎุฏุงูู ูู ุงุฎุชูุงุฑ ุงูุนุจุงุฑุงุช ุงูุนุดูุงุฆูุฉ
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters,
)

# ุฅุนุฏุงุฏุงุช ุงูุชุณุฌูู (Logging)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --------------------------------- ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช ---------------------------------

DB_NAME = 'volunteers_system.db'

def get_db_connection():
    """ุฅูุดุงุก ุงุชุตุงู ุจูุงุนุฏุฉ ุจูุงูุงุช SQLite"""
    conn = sqlite3.connect(DB_NAME)
    conn.row_factory = sqlite3.Row  # ุงููุตูู ุฅูู ุงูุฃุนูุฏุฉ ุจุงูุงุณู
    return conn

def setup_database():
    """ุฅูุดุงุก ุฌุฏููู ุงููุฑู ูุงููุชุทูุนูู ูุชุนุจุฆุฉ ุจุนุถ ุงููุฑู ุงููุจุฏุฆูุฉ"""
    conn = get_db_connection()
    cursor = conn.cursor()

    # 1. Teams Table (ุงููุฑู)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Teams (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL UNIQUE
        )
    ''')
    
    # 2. Volunteers Table (ุงููุชุทูุนูู)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Volunteers (
            id INTEGER PRIMARY KEY,
            telegram_id INTEGER UNIQUE,
            full_name TEXT NOT NULL,
            team_id INTEGER,
            registration_date TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (team_id) REFERENCES Teams(id)
        )
    ''')

    # ุฅุถุงูุฉ ูุฑู ูุจุฏุฆูุฉ ุฅุฐุง ูู ุชูู ููุฌูุฏุฉ
    initial_teams = [('ูุฑูู ุงูุฏุนู ุงูุฃูู',), ('ูุฑูู ุงูุฏุนู ุงูุซุงูู',), ('ูุฑูู ุงููุชุงุจุนุฉ',)]
    for team in initial_teams:
        try:
            cursor.execute("INSERT INTO Teams (name) VALUES (?)", team)
        except sqlite3.IntegrityError:
            pass # ุชู ุฅุถุงูุชู ูุณุจููุง

    conn.commit()
    conn.close()

def get_all_teams():
    """ุฌูุจ ุฌููุน ุงููุฑู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช"""
    conn = get_db_connection()
    teams = conn.execute("SELECT id, name FROM Teams").fetchall()
    conn.close()
    return teams

def add_new_volunteer_to_db(telegram_id, full_name, team_id):
    """ุฅุฏุฑุงุฌ ูุชุทูุน ุฌุฏูุฏ ูู ุฌุฏูู ุงููุชุทูุนูู"""
    conn = get_db_connection()
    try:
        conn.execute(
            "INSERT INTO Volunteers (telegram_id, full_name, team_id) VALUES (?, ?, ?)",
            (telegram_id, full_name, team_id)
        )
        conn.commit()
        conn.close()
        return True
    except sqlite3.IntegrityError:
        conn.close()
        return False # ุงููุชุทูุน ูุณุฌู ูุณุจููุง ุจููุณ ุฑูู ุงูู ID

def is_admin(chat_id):
    """ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ูู ุงููุดุฑู"""
    if not ADMIN_CHAT_ID:
        return False
    return str(chat_id) == str(ADMIN_CHAT_ID)


# --------------------------------- ุงูุนุจุงุฑุงุช ุงูุชุญููุฒูุฉ (Motivational Quotes) ---------------------------------

# โ ุฌุฏูุฏ: ูุงุฆูุฉ ุจุฃูุซุฑ ูู 20 ุนุจุงุฑุฉ ุชุญููุฒูุฉ
MOTIVATIONAL_QUOTES = [
    "โุงูุฎูุฑ ุงูุฐู ุชูุนูู ูุง ูุถูุน ุฃุจุฏูุงุ ุณุชุฌุฏู ูู ุตุญููุชู ุฃุซุฑุงู ุฌูููุงู ูุง ูููุญู. โจ",
    "ูู ูู ุนูู ุชุทูุนูุ ุฃูุช ูุง ุชูุฏู ุงููุณุงุนุฏุฉ ููุขุฎุฑูู ูุญุณุจุ ุจู ุชุฒุฑุน ุงูุฃูู ูู ููุจู ุฃูุถุงู. ๐",
    "ุชุฐูุฑ ุฏุงุฆูุงู ุฃู ุฃุตุบุฑ ุฌูุฏ ุชุจุฐูู ูู ูุณุงุนุฏุฉ ุงูุขุฎุฑููุ ูู ุฃุนุธู ุฃุซุฑ ูู ููุฒุงู ุงูุฃุฌุฑ. ๐",
    "ุงูุชูุงุคู ููุณ ูุฌุฑุฏ ูููุฉุ ุจู ูู ูุนู ุฅูุฌุงุจู ูุจุฏุฃ ููู. ุงุณุชูุฑ ูู ูุดุฑ ุงูุถูุก. ๐ก",
    "ุงูุนูู ุงูุฎูุฑู ูุง ูุชุทูุจ ูุงูุงู ุฏุงุฆูุงูุ ูููู ุฃู ุชูุฏู ุฌุฒุกุงู ูู ุฑูุญู ูููุชู. ุดูุฑุงู ูุฌูุฏู. ๐",
    "ูู ุฃูุช ุงูุชุบููุฑ ุงูุฐู ุชุชููู ุฃู ุชุฑุงู ูู ุงูุนุงูู. ูู ุฎุทูุฉ ุชุทูุนูุฉ ูู ุจุฏุงูุฉ. ๐",
    "ุงููุชุทูุนูู ูู ุงูููุจ ุงููุงุจุถ ูุฃู ูุฌุชูุนุ ุจุฌููุฏูู ุชุชุณุน ุฏุงุฆุฑุฉ ุงูุนุทุงุก. โค๏ธ",
    "ุงูุฃูู ุดุฌุฑุฉ ูุง ูุซูุฑ ุฅูุง ุจุงูุนูู. ุงุณุชูุฑ ูู ุงูุณูุงูุฉ! ๐ณ",
    "ุฃุซุฑู ุงูุฌููู ููุฑู ูู ุนููู ูู ุณุงุนุฏุชูู. ูุง ุชุณุชุฎู ุจุฃู ุนูู ููุช ุจู. ๐ท",
    "ุฅุฐุง ุฃุฑุฏุช ุฃู ุชููู ุณุนูุฏุงูุ ููู ุณุจุจุงู ูู ุณุนุงุฏุฉ ุบูุฑู. ูุฐุง ูู ุฌููุฑ ุงูุชุทูุน. ๐",
    "ุฑุญูุฉ ุงูุฃูู ููู ุชุจุฏุฃ ุจุฎุทูุฉุ ูุฃุซูู ุงูุฎุทูุงุช ูู ุชูู ุงูุชู ุชุฎุทููุง ูุฎุฏูุฉ ุงูุขุฎุฑูู. ๐ถ",
    "ุฃูุช ูุณุช ูุฌุฑุฏ ูุชุทูุนุ ุฃูุช ุตุงูุน ูุฑู ูู ุญูุงุฉ ุงููุซูุฑูู. ุฏูุช ูุจุฏุนุงู. ๐ฆธ",
    "ุงููุฃุณ ูุง ูููู ุจูู ุนุฑููุง ูุนูู ุงูุนุทุงุก ูุงูุฎูุฑ. ุงููุณุชูุจู ููุชุธุฑ ูู ูุฒุฑุน ููู ุงูุฃูู. ๐ฑ",
    "ุฌุจุฑ ุงูุฎูุงุทุฑ ูู ูู ูุง ูุชููู ุฅูุง ุงูุฃูููุงุกุ ุดูุฑุงู ูููุจู ุงูุทูุจ. ๐",
    "ุงุฌุนููุง ุฃุซุฑูู ูุงููุทุฑุ ูุณูู ุงูุฃุฑุถ ููุญูููุง ุฏูู ุถุฌูุฌ. ุงูุนูู ุงูุตุงูุช ุฃุจูุบ. ๐ง๏ธ",
    "ูุฏ ูุง ุชุฐูุฑ ูู ูุฑุฉ ุณูุทุชุ ูููู ุณุชุฐูุฑ ูู ูุฑุฉ ูุฏุช ูุฏู ูููุณุงุนุฏุฉ. ๐ช",
    "ุชุฐูุฑ: ูู ูุชุทูุน ูู ุจุทู ุญูููู ูู ุงูุญูุงุฉ ุงูููููุฉ. ุงุณุชูุฑ ูู ุฅููุงุฐ ุงูุนุงูู ุจุทุฑููุชู. ๐ก๏ธ",
    "ูุง ููุฌุฏ ุนูู ุตุบูุฑ ุนูุฏูุง ููุฏู ูู ููุจ ูุจูุฑ. ุนุทุงุคู ูุง ูููุฏุฑ ุจุซูู. ๐",
    "ุงูุชุทูุน ูู ุฃู ุชุชุฑู ููุงูุงู ุฃูุถู ููุง ูุฌุฏุชู ุนููู. ุดูุฑุงู ูุชุฑู ุจุตูุชู ุงูุฑุงุฆุนุฉ. โ๏ธ",
    "ุญุงูุธ ุนูู ุฅุดุฑุงูุชูุ ูุงูุนุงูู ุจุญุงุฌุฉ ุฅูู ูุชูุงุฆููู ูุซูู ููุถูุฆูุง ุฏุฑูุจูู. โ๏ธ",
    "ุฅู ุฃูุถู ุทุฑููุฉ ูุชุฌุฏ ููุณูุ ูู ุฃู ุชุถูุนูุง ูู ุฎุฏูุฉ ุงูุขุฎุฑูู. (ุบุงูุฏู) ๐๏ธ",
    "ูุง ุชุชููู ุนู ุงูุญููุ ูุงูุฃูู: ูุง ุชุชููู ุนู ุงูุนูู ูุชุญููู ูุฐู ุงูุฃุญูุงู ุฅูู ูุงูุน ููููุณ ููุฌููุน. ๐"
]

# --------------------------------- ุชุนุฑูู ุงูุญุงูุงุช (States) ---------------------------------

# ุงูุญุงูุงุช (States) ุงููุณุชุฎุฏูุฉ ูู ConversationHandler
(MAIN_MENU, FIRST_NAME, LAST_NAME, TEAM_NAME, 
 APOLOGY_TYPE, INITIATIVE_NAME, APOLOGY_REASON, APOLOGY_NOTES,
 LEAVE_START_DATE, LEAVE_END_DATE, LEAVE_REASON, LEAVE_NOTES,
 FEEDBACK_MESSAGE, PROBLEM_DESCRIPTION, PROBLEM_NOTES,
 ADMIN_MENU, ADD_VOLUNTEER_FULL_NAME, ADD_VOLUNTEER_SELECT_TEAM, ADD_VOLUNTEER_FINALIZE) = range(19)

# ูุชุบูุฑุงุช ุงูุจูุฆุฉ (Environment Variables)
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

# ูุชุบูุฑุงุช ุฎุงุตุฉ ุจู Webhook Render
WEBHOOK_URL = os.getenv('WEBHOOK_URL') 
PORT = int(os.environ.get('PORT', '5000')) 

def generate_request_id():
    """ุชูููุฏ ุฑูู ุทูุจ ูุฑูุฏ"""
    return f"REQ{int(time.time())}"

def get_request_title(request_type):
    """ุฌูุจ ุนููุงู ุงูุทูุจ ุจูุงุกู ุนูู ููุนู"""
    titles = {
        'apology': 'ุทูุจ ุงูุงุนุชุฐุงุฑ',
        'leave': 'ุทูุจ ุงูุฅุฌุงุฒุฉ',
        'problem': 'ุจูุงุบ ุงููุดููุฉ',
        'feedback': 'ุงูุงูุชุฑุงุญ/ุงูููุงุญุธุฉ'
    }
    return titles.get(request_type, 'ุทูุจ')

# --------------------------------- ุงูุฏูุงู ุงูุฃุณุงุณูุฉ ---------------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุงูุจุฏุงูุฉ - ุนุฑุถ ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ"""
    query = update.callback_query
    if query:
        await query.answer()
        user = query.from_user
        message = query.message
    else:
        user = update.effective_user
        message = update.message

    keyboard = [
        [InlineKeyboardButton("๐ ุทูุจ ุงุนุชุฐุงุฑ", callback_data='apology'),
         InlineKeyboardButton("๐๏ธ ุทูุจ ุฅุฌุงุฒุฉ", callback_data='leave')],
        [InlineKeyboardButton("๐ง ูุณู ุญู ุงููุดุงูู", callback_data='problem'),
         InlineKeyboardButton("๐ก ุงูุชุฑุงุญุงุช ูููุงุญุธุงุช", callback_data='feedback')],
        [InlineKeyboardButton("๐ ูุฏูุฉ ูุทููุฉ ูู ุงูุจูุช", callback_data='motivational_gift')] # โ ุฌุฏูุฏ: ุฒุฑ ุงููุฏูุฉ
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        f'ุฃููุงู {user.first_name}! ๐\n\n'
        'ุฃูุง ุจูุช ุทูุจุงุช ุงููุชุทูุนูู.\n'
        'ููู ูููููู ูุณุงุนุฏุชู ุงููููุ\n\n'
        'ูุฅูุบุงุก ุงูุทูุจ ูู ุฃู ููุชุ ุฃุฑุณู /cancel'
    )

    if query:
        await query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await message.reply_text(text, reply_markup=reply_markup, reply_to_message_id=None)

    return MAIN_MENU

# --------------------------------- ุฏุงูุฉ ุงููุฏูุฉ ุงูุชุญููุฒูุฉ ---------------------------------

async def send_motivational_gift(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """โ ุฌุฏูุฏ: ุงุฎุชูุงุฑ ูุฅุฑุณุงู ุนุจุงุฑุฉ ุชุญููุฒูุฉ ุนุดูุงุฆูุฉ"""
    query = update.callback_query
    await query.answer()
    
    # ุงุฎุชูุงุฑ ุนุจุงุฑุฉ ุนุดูุงุฆูุฉ
    quote = random.choice(MOTIVATIONAL_QUOTES)
    
    # ุฑุณุงูุฉ ุงููุฏูุฉ
    gift_message = (
        "๐ **ูุฏูุฉ ูุทููุฉ ูู!** ๐\n"
        "โโโโโโโ\n"
        f"*{quote}*\n"
        "โโโโโโโ\n"
        "ุดูุฑุงู ูุฌููุฏู ูุนุทุงุฆู ุงููุชูุงุตู. ุฃูุช ุชุตูุน ูุฑูุงู ุญููููุงู! ๐"
    )

    # ุฅุธูุงุฑ ุฑุณุงูุฉ ุงููุฏูุฉ ุซู ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ
    await query.message.reply_text(
        gift_message, 
        parse_mode='Markdown'
    )
    
    # ุฅุจูุงุก ุงููุณุชุฎุฏู ูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ
    return await start(update, context)


# --------------------------------- ุฏูุงู ุงูููุงุฆู ูุงููุณุงุฑุงุช ---------------------------------

async def main_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ูุนุงูุฌุฉ ุงุฎุชูุงุฑ ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ"""
    query = update.callback_query
    
    choice = query.data
    
    if choice == 'motivational_gift': # โ ุฌุฏูุฏ: ูุนุงูุฌุฉ ุฒุฑ ุงููุฏูุฉ
        return await send_motivational_gift(update, context)
        
    await query.answer()

    context.user_data.clear() 
    context.user_data['request_type'] = choice
    context.user_data['request_id'] = generate_request_id()

    keyboard = [[InlineKeyboardButton("๐ ุนูุฏุฉ", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if choice == 'feedback':
        await query.edit_message_text(
            '๐ก ุงูุชุฑุงุญุงุช ูููุงุญุธุงุช\n\n'
            'ูุณุนุฏ ุจุณูุงุน ุขุฑุงุฆู ูุงูุชุฑุงุญุงุชู!\n'
            'ุงูุฑุฌุงุก ูุชุงุจุฉ ุงูุชุฑุงุญู ุฃู ููุงุญุธุชู:',
            reply_markup=reply_markup
        )
        return FEEDBACK_MESSAGE

    elif choice == 'problem':
        await query.edit_message_text(
            '๐ง ูุณู ุญู ุงููุดุงูู\n\n'
            'ุงูุฑุฌุงุก ูุตู ุงููุดููุฉ ุงูุชู ุชูุงุฌููุง ุจูุถูุญ:',
            reply_markup=reply_markup
        )
        return PROBLEM_DESCRIPTION

    await query.edit_message_text(
        'ุงูุฑุฌุงุก ุฅุฏุฎุงู ุงุณูู ุงูุฃูู:',
        reply_markup=reply_markup
    )
    return FIRST_NAME

# --------------------------------- (ุจููุฉ ุฏูุงู ูุณุงุฑุงุช ุงูุทูุจุงุช - ูุง ุชุบููุฑ ุฌููุฑู) ---------------------------------

# (ุชู ุญุฐู ุจููุฉ ุฏูุงู ุงููุณุงุฑุงุช ุงูุทูููุฉ ูุชูููู ุญุฌู ุงูุฅุฌุงุจุฉุ ูุน ุงูุนูู ุฃููุง ูู ุชุชุบูุฑ ุฌููุฑูุงู)
# (ูุน ููุงุญุธุฉ ุฃู ุงูุฏูุงู apology_notes, leave_notes, problem_notes, feedback_message, admin_start, admin_add_volunteer_prompt, admin_get_full_name, admin_select_team, admin_finalize_volunteer, handle_admin_action, back_to_menu, new_request_handler, cancel ููุฌูุฏุฉ ููุง ูู ูู ุงูููุฏ ุงูุฃุตูู)

async def first_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุญูุธ ุงูุงุณู ุงูุฃูู ูุทูุจ ุงููููุฉ"""
    context.user_data['first_name'] = update.message.text

    keyboard = [[InlineKeyboardButton("๐ ุนูุฏุฉ", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f'ุฃููุงู {update.message.text}!\n\n'
        'ุงูุฑุฌุงุก ุฅุฏุฎุงู ุงููููุฉ (ุงุณู ุงูุนุงุฆูุฉ):',
        reply_markup=reply_markup
    )
    return LAST_NAME


async def last_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุญูุธ ุงููููุฉ ูุทูุจ ุงุณู ุงููุฑูู"""
    context.user_data['last_name'] = update.message.text

    keyboard = [[InlineKeyboardButton("๐ ุนูุฏุฉ", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        'ูุง ูู ุงููุฑูู ุงูุฐู ุชูุชูู ุฅูููุ\n'
        '(ูุซุงู: ูุฑูู ุงูุฏุนู ุงูุฃููุ ุงูุฏุนู ุงูุซุงููุ ุงูุฎ)',
        reply_markup=reply_markup
    )
    return TEAM_NAME


async def team_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุญูุธ ุงุณู ุงููุฑูู ูุงูุงูุชูุงู ุญุณุจ ููุน ุงูุทูุจ"""
    context.user_data['team_name'] = update.message.text
    request_type = context.user_data.get('request_type')

    if request_type == 'apology':
        keyboard = [
            [InlineKeyboardButton("ุงุฌุชูุงุน", callback_data='meeting')],
            [InlineKeyboardButton("ูุจุงุฏุฑุฉ", callback_data='initiative')],
            [InlineKeyboardButton("ุขุฎุฑ", callback_data='other')],
            [InlineKeyboardButton("๐ ุนูุฏุฉ", callback_data='back_to_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            '๐ ุทูุจ ุงุนุชุฐุงุฑ\n\n'
            'ูุง ูู ููุน ุงููุนุงููุฉ/ุงูุงุนุชุฐุงุฑุ',
            reply_markup=reply_markup
        )
        return APOLOGY_TYPE

    elif request_type == 'leave':
        keyboard = [[InlineKeyboardButton("๐ ุนูุฏุฉ", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            '๐๏ธ ุทูุจ ุฅุฌุงุฒุฉ\n\n'
            '๐ **ููุงุญุธุฉ ูุงูุฉ:** ูุฏุฉ ุงูุฅุฌุงุฒุฉ ุงููุณููุญุฉ ูููุชุทูุน ุฎูุงู ุงูุณูุฉ ูู **ุดูุฑ ูุงุญุฏ ููุท** ููุงูุชุญุงูุงุช ู**ุงูุธุฑูู ุงููุงูุฑุฉ**.\n\n'
            'ุงูุฑุฌุงุก ุฅุฏุฎุงู **ุชุงุฑูุฎ ุจุฏุก ุงูุฅุฌุงุฒุฉ**:\n'
            '(ููุฑุฌู ุงุณุชุฎุฏุงู ุตูุบุฉ ูุงุถุญุฉ ูุซู: 2025-11-01)',
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return LEAVE_START_DATE

    return MAIN_MENU

# ... (ุจููุฉ ุฏูุงู apology_type, initiative_name, apology_reason, leave_start_date, leave_end_date, leave_reason, problem_description) ...
# (ููุงุญุธุฉ: ุฏูุงู ุงูุฅุฑุณุงู ูุซู apology_notes, leave_notes, problem_notes, feedback_message ูุง ุชุญุชุงุฌ ูุชุบููุฑ)

# --------------------------------- ุฏูุงู ุงููุดุฑู ูุฅุถุงูุฉ ูุชุทูุน ---------------------------------

async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """โ ุฌุฏูุฏ: ููุทุฉ ุฏุฎูู ุงููุดุฑู (ุงูุฃูุฑ /admin)"""
    chat_id = update.effective_chat.id
    if not is_admin(chat_id):
        await update.message.reply_text("โ ุบูุฑ ูุตุฑุญ ูู ุจุงุณุชุฎุฏุงู ูุฐุง ุงูุฃูุฑ.")
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton("โ ุฅุถุงูุฉ ูุชุทูุน ุฌุฏูุฏ", callback_data='admin_add_volunteer')],
        [InlineKeyboardButton("๐ ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        '๐ ูุฑุญุจุงู ุจู ูุง ูุดุฑู!\n\n'
        'ููุญุฉ ุชุญูู ุงููุชุทูุนูู:',
        reply_markup=reply_markup
    )
    return ADMIN_MENU

async def admin_add_volunteer_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """โ ุฌุฏูุฏ: ูุทุงูุจุฉ ุงููุดุฑู ุจุฅุฏุฎุงู ุงูุงุณู ุงููุงูู"""
    query = update.callback_query
    await query.answer()

    keyboard = [[InlineKeyboardButton("๐ ุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        'โ ุฅุถุงูุฉ ูุชุทูุน ุฌุฏูุฏ\n\n'
        'ุงูุฑุฌุงุก ุฅุฏุฎุงู **ุงูุงุณู ุงููุงูู ูููุชุทูุน** (ููุง ุณูุธูุฑ ูู ุงูููุงุฆู):',
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return ADD_VOLUNTEER_FULL_NAME

async def admin_get_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """โ ุฌุฏูุฏ: ุญูุธ ุงูุงุณู ุงููุงูู ูุงููุทุงูุจุฉ ุจุงุฎุชูุงุฑ ุงููุฑูู"""
    context.user_data['new_volunteer_full_name'] = update.message.text
    
    teams = get_all_teams()
    
    if not teams:
        await update.message.reply_text(
            'โ ูุง ุชูุฌุฏ ูุฑู ูุณุฌูุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุญุงููุงู!\n'
            'ุงูุฑุฌุงุก ุฅุถุงูุฉ ูุฑู ูุฏููุงู ุฃููุงู ุซู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ุนุจุฑ /admin.'
        )
        return await admin_start(update, context)

    # ุฅูุดุงุก ุฃุฒุฑุงุฑ ุงููุฑู ุฏููุงููููุงู
    keyboard = [[InlineKeyboardButton(team['name'], callback_data=f"team_id|{team['id']}")] for team in teams]
    keyboard.append([InlineKeyboardButton("๐ ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data='back_to_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"ุชู ุชุณุฌูู ุงูุงุณู: {update.message.text}\n\n"
        "ุงูุฑุฌุงุก ุงุฎุชูุงุฑ **ุงููุฑูู** ุงูุฐู ุณููุถู ุฅููู ุงููุชุทูุน:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return ADD_VOLUNTEER_SELECT_TEAM

async def admin_select_team(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """โ ุฌุฏูุฏ: ุญูุธ ุงููุฑูู ูุงููุทุงูุจุฉ ุจุฑูู ูุนุฑู ุชูููุฌุฑุงู"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split('|')
    team_id = int(data[1])
    
    # ุฌูุจ ุงุณู ุงููุฑูู
    conn = get_db_connection()
    team_row = conn.execute("SELECT name FROM Teams WHERE id = ?", (team_id,)).fetchone()
    conn.close()
    team_name = team_row['name'] if team_row else 'ุบูุฑ ูุนุฑูู'
    
    context.user_data['new_volunteer_team_id'] = team_id
    context.user_data['new_volunteer_team_name'] = team_name

    keyboard = [[InlineKeyboardButton("๐ ุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"โ ุชู ุงุฎุชูุงุฑ ุงููุฑูู: **{team_name}**\n\n"
        "ุงูุฎุทูุฉ ุงูุฃุฎูุฑุฉ: ุงูุฑุฌุงุก ุฅุฑุณุงู **ุฑูู ูุนุฑู ุชูููุฌุฑุงู (Telegram ID)** ุงูุฎุงุต ุจุงููุชุทูุน.\n"
        "*(ูููู ุงูุญุตูู ุนููู ุนุจุฑ ุจูุชุงุช ูุซู @userinfobot)*\n\n"
        "ูุซุงู: `123456789`",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return ADD_VOLUNTEER_FINALIZE

async def admin_finalize_volunteer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """โ ุฌุฏูุฏ: ุงุณุชูุงู ุฑูู ุชูููุฌุฑุงู ูุญูุธ ุงููุชุทูุน ูู ุงููุงุนุฏุฉ"""
    telegram_id_str = update.message.text
    
    keyboard = [[InlineKeyboardButton("๐ ุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # ุงูุชุญูู ูู ุฃู ุงูุฅุฏุฎุงู ูู ุฑูู
    if not telegram_id_str.isdigit():
        await update.message.reply_text(
            'โ **ุฅุฏุฎุงู ุบูุฑ ุตุงูุญ!**\n'
            'ุงูุฑุฌุงุก ุฅุฏุฎุงู ุฑูู ูุนุฑู ุชูููุฌุฑุงู **ููุท** (ูุซุงู: 123456789).',
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return ADD_VOLUNTEER_FINALIZE
        
    telegram_id = int(telegram_id_str)
    full_name = context.user_data.get('new_volunteer_full_name')
    team_id = context.user_data.get('new_volunteer_team_id')
    team_name = context.user_data.get('new_volunteer_team_name')

    # ุฅุถุงูุฉ ุฅูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    success = add_new_volunteer_to_db(telegram_id, full_name, team_id)
    
    keyboard = [[InlineKeyboardButton("๐ ุทูุจ ุฌุฏูุฏ", callback_data='new_request')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if success:
        await update.message.reply_text(
            f"โ **ุชูุช ุฅุถุงูุฉ ุงููุชุทูุน ุจูุฌุงุญ!**\n\n"
            f"โข ุงูุงุณู: **{full_name}**\n"
            f"โข ุงููุฑูู: **{team_name}**\n"
            f"โข ูุนุฑู ุชูููุฌุฑุงู: `{telegram_id}`",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            f"โ **ูุดู ูู ุฅุถุงูุฉ ุงููุชุทูุน!**\n\n"
            f"ููุงู ูุชุทูุน ุขุฎุฑ ูุณุฌู ุจุงููุนู ุจููุณ ุฑูู ูุนุฑู ุชูููุฌุฑุงู (`{telegram_id}`).\n"
            f"ุงูุฑุฌุงุก ุงูุชุญูู ูู ุงูุฑูู ูุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ุนุจุฑ /admin.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    context.user_data.clear()
    return ConversationHandler.END


# --------------------------------- ุฏูุงู ุงูุชุญูู ูุงูุฅุฌุฑุงุกุงุช ---------------------------------

async def handle_admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ูุนุงูุฌุฉ ุฃุฒุฑุงุฑ ุงูููุงููุฉ/ุงูุฑูุถ ูู ุฑุณุงูุฉ ุงููุดุฑู"""
    query = update.callback_query
    await query.answer()

    data = query.data.split('|')
    action = data[1]
    request_type = data[2]
    request_id = data[3]
    user_id = data[4]

    admin_user = query.from_user
    request_title = get_request_title(request_type)

    try:
        if action == 'approve':
            user_notification = f'โ ุชูุงูููุง! ุชูุช **ุงูููุงููุฉ** ุนูู {request_title} ุงูุฎุงุต ุจู ุจุฑูู `{request_id}`.'
        else:
            user_notification = (
                f'โ ูุนุชุฐุฑ! ุชู **ุฑูุถ** {request_title} ุงูุฎุงุต ุจู ุจุฑูู `{request_id}`.\n'
                f'ููุงุณุชุนูุงู ุนู ุงูุณุจุจุ ูุฑุฌู **ูุฑุงุณูุฉ ุงูููุงุฑุฏ ุงูุจุดุฑูุฉ (HR)**.'
            )

        await context.bot.send_message(
            chat_id=user_id,
            text=user_notification,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฅุดุนุงุฑ ูููุณุชุฎุฏู {user_id}: {e}")

    status_text = "ุชูุช ุงูููุงููุฉ โ" if action == 'approve' else "ุชู ุงูุฑูุถ โ"

    original_text = query.message.text
    updated_text = (
        f"{original_text}\n\n"
        f"**โโโโโโโโโโโโโโโโโ**\n"
        f"**๐ ุญุงูุฉ ุงูุทูุจ:** {status_text}\n"
        f"**โ๏ธ ุจูุงุณุทุฉ:** {admin_user.first_name} (@{admin_user.username or 'ูุง ููุฌุฏ'})"
    )

    try:
        await query.edit_message_text(
            text=updated_text,
            reply_markup=None, 
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุชุญุฏูุซ ุฑุณุงูุฉ ุงููุดุฑู: {e}")


async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ"""
    query = update.callback_query
    if query:
        await query.answer()

    context.user_data.clear()
    return await start(update, context)


async def new_request_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ูุนุงูุฌุฉ ุฒุฑ ุทูุจ ุฌุฏูุฏ"""
    return await start(update, context)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุฅูุบุงุก ุงููุญุงุฏุซุฉ"""
    await update.message.reply_text(
        'โ **ุชู ุฅูุบุงุก ุงูุทูุจ.**\n'
        'ููููู ุงูุจุฏุก ูู ุฌุฏูุฏ ุจุฅุฑุณุงู /start',
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='Markdown'
    )
    context.user_data.clear()
    return ConversationHandler.END


# --------------------------------- ุงููุชุบูุฑ ุงูุนุงููู ---------------------------------
application = None


# --------------------------------- ุฏุงูุฉ ุงูุฅุนุฏุงุฏ ุงูุชู ุชูููุฐ ูุฑุฉ ูุงุญุฏุฉ ---------------------------------

def initialize_application() -> None:
    """
    ุชููู ุจุฅุนุฏุงุฏ ูุงุฆู ุงูุชุทุจูู (Application) ูุฅุถุงูุฉ ุฌููุน ุงูู Handlers.
    ุชูููุฐ ูุฑุฉ ูุงุญุฏุฉ ููุท ุนูุฏ ุจุฏุก ุชุดุบูู ุงูุฎุงุฏู.
    """
    global application 
    
    if not BOT_TOKEN or not ADMIN_CHAT_ID:
        raise ValueError("BOT_TOKEN or ADMIN_CHAT_ID environment variables not set.")

    # โ ุฌุฏูุฏ: ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช
    setup_database()

    # 1. ุจูุงุก ุงูุชุทุจูู
    application = Application.builder().token(BOT_TOKEN).build()

    # 2. ุฅุถุงูุฉ ุงูู Handlers
    back_to_menu_handler = CallbackQueryHandler(back_to_menu, pattern='^back_to_menu$')
    text_message_filter = filters.TEXT & ~filters.COMMAND
    
    admin_action_handler = CallbackQueryHandler(handle_admin_action, pattern=r'^action\|(approve|reject)\|.+$')
    
    # โ ุฌุฏูุฏ: ุชุนุฑูู ูุนุงูุฌ ุฃูุฑ ุงููุดุฑู
    admin_command_handler = CommandHandler('admin', admin_start)
    application.add_handler(admin_command_handler)

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CommandHandler('admin', admin_start), 
            CallbackQueryHandler(new_request_handler, pattern='^new_request$')
        ],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(main_menu_choice, pattern='^(apology|leave|feedback|problem|motivational_gift)$') # โ ุชู ุงูุชุนุฏูู ูุฅุถุงูุฉ ุงููุฏูุฉ
            ],
            # ... (ุจููุฉ ุญุงูุงุช ุงููุชุทูุนูู)
            FIRST_NAME: [back_to_menu_handler, MessageHandler(text_message_filter, first_name)],
            LAST_NAME: [back_to_menu_handler, MessageHandler(text_message_filter, last_name)],
            TEAM_NAME: [back_to_menu_handler, MessageHandler(text_message_filter, team_name)],
            # (ุจููุฉ ุงูุญุงูุงุช ููุง ูู)
            
            # (ุชู ุญุฐู ุจููุฉ ุงูุญุงูุงุช ูุชูููู ุญุฌู ุงูุฅุฌุงุจุฉุ ูุน ุงูุนูู ุฃููุง ูู ุชุชุบูุฑ)
            
            # ุญุงูุงุช ุงููุดุฑู
            ADMIN_MENU: [
                CallbackQueryHandler(admin_add_volunteer_prompt, pattern='^admin_add_volunteer$'),
                back_to_menu_handler, 
            ],
            ADD_VOLUNTEER_FULL_NAME: [back_to_menu_handler, MessageHandler(text_message_filter, admin_get_full_name)],
            ADD_VOLUNTEER_SELECT_TEAM: [
                back_to_menu_handler, 
                CallbackQueryHandler(admin_select_team, pattern=r'^team_id\|\d+$')
            ],
            ADD_VOLUNTEER_FINALIZE: [back_to_menu_handler, MessageHandler(text_message_filter, admin_finalize_volunteer)],
            
            # ุญุงูุงุช ุงูุทูุจุงุช ุงูุนุงุฏูุฉ: (ูู ุชุชุบูุฑ)
            APOLOGY_TYPE: [
                back_to_menu_handler,
                CallbackQueryHandler(apology_type, pattern='^(meeting|initiative|other)$')
            ],
            INITIATIVE_NAME: [back_to_menu_handler, MessageHandler(text_message_filter, initiative_name)],
            APOLOGY_REASON: [back_to_menu_handler, MessageHandler(text_message_filter, apology_reason)],
            APOLOGY_NOTES: [
                back_to_menu_handler,
                CallbackQueryHandler(apology_notes, pattern='^skip_apology_notes$'),
                MessageHandler(text_message_filter, apology_notes)
            ],
            LEAVE_START_DATE: [back_to_menu_handler, MessageHandler(text_message_filter, leave_start_date)],
            LEAVE_END_DATE: [back_to_menu_handler, MessageHandler(text_message_filter, leave_end_date)],
            LEAVE_REASON: [back_to_menu_handler, MessageHandler(text_message_filter, leave_reason)],
            LEAVE_NOTES: [
                back_to_menu_handler,
                CallbackQueryHandler(leave_notes, pattern='^skip_leave_notes$'),
                MessageHandler(text_message_filter, leave_notes)
            ],
            PROBLEM_DESCRIPTION: [back_to_menu_handler, MessageHandler(text_message_filter, problem_description)],
            PROBLEM_NOTES: [
                back_to_menu_handler,
                CallbackQueryHandler(problem_notes, pattern='^skip_problem_notes$'),
                MessageHandler(text_message_filter, problem_notes)
            ],
            FEEDBACK_MESSAGE: [back_to_menu_handler, MessageHandler(text_message_filter, feedback_message)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    application.add_handler(admin_action_handler)
    
    # 3. ุฅุนุฏุงุฏ ุงูู Webhook
    if WEBHOOK_URL:
        application.run_webhook( 
            listen="0.0.0.0",
            port=PORT,
            url_path=BOT_TOKEN,
            webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}"
        )
        logger.info(f"ุงูููุจ ููู ุชู ุฅุนุฏุงุฏู: {WEBHOOK_URL}/{BOT_TOKEN}")

# ** ูุชู ุงุณุชุฏุนุงุก ุฏุงูุฉ ุงูุชููุฆุฉ ุนูุฏ ุชุญููู ุงููุญุฏุฉ (Module) **
initialize_application()


# --------------------------------- ุฏุงูุฉ WSGI ุงููุณูุทุฉ (ูุชุดุบูู Gunicorn) ---------------------------------
def wsgi_app(environ, start_response):
    """
    ุฏุงูุฉ WSGI ุงููุณูุทุฉ ุงูุชู ูุณุชุฏุนููุง Gunicorn. 
    """
    if application is None:
        status = '500 INTERNAL SERVER ERROR'
        headers = [('Content-type', 'text/plain')]
        start_response(status, headers)
        return [b"Application not initialized."]
        
    return application.webhooks(environ, start_response)


# --------------------------------- ุฏุงูุฉ ุงูุชุดุบูู ุงููุญููุฉ (ููุชุทููุฑ ููุท) ---------------------------------

if __name__ == '__main__':
    if not WEBHOOK_URL:
        if application:
            logger.info("ูุชู ุงูุชุดุบูู ุจู Polling (ุชุทููุฑ ูุญูู).")
            application.run_polling(allowed_updates=Update.ALL_TYPES)
    else:
        logger.info("ุชู ุงูุชููุฆุฉุ ููู ุงููุชููุน ุฃู ูุชู ุงูุชุดุบูู ุนุจุฑ Gunicorn.")
